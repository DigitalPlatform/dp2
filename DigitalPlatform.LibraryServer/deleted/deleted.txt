

#if NOOOO
                // 启动TraceDTLP

                // 从断点记忆文件中读出信息
                // return:
                //      -1  error
                //      0   file not found
                //      1   found
                nRet = ReadBatchTaskBreakPointFile("跟踪DTLP数据库",
                    out strBreakPoint,
                    out strError);
                if (nRet == -1)
                {
                    app.WriteErrorLog("ReadBatchTaskBreakPointFile时出错：" + strError);
                }
                // 如果nRet == 0，表示没有断点文件存在，也就不必自动启动这个任务

                // strBreakPoint并未被使用。而是断点文件是否存在，这一信息有价值。

                if (nRet == 1)
                {
                    try
                    {

                        // 从断点文件中取出断点字符串
                        // 断点字符串格式：序号.偏移量@日志文件名
                        //  或者：序号@日志文件名
                        // 获得断点信息的整个过程的代码，是否适宜归入TraceDTLP类？
                        // 如果成熟，可以归纳作为BatchTask基类的一个特性。

                        TraceDTLP tracedtlp = new TraceDTLP(this, null);
                        this.BatchTasks.Add(tracedtlp);

                        if (tracedtlp.StartInfo == null)
                            tracedtlp.StartInfo = new BatchTaskStartInfo();   // 按照缺省值来
                        tracedtlp.StartInfo.Start = "!breakpoint";  //strBreakPoint;
                        tracedtlp.ClearProgressFile();   // 清除进度文件内容
                        tracedtlp.StartWorkerThread();
                    }
                    catch (Exception ex)
                    {
                        app.WriteErrorLog("启动批处理任务时出错：" + ex.Message);
                        goto ERROR1;
                    }
                }

#endif



#if NO
                        bool bLoop = false;
                        string strLastNumber = "";

                        // return:
                        //      -1  出错
                        //      0   没有找到断点信息
                        //      1   找到了断点信息
                        nRet = patron_rep.ReadLastNumber(
                            out bLoop,
                            out strLastNumber,
                            out strError);
                        if (nRet == -1)
                        {
                            app.WriteErrorLog("ReadLastNumber时出错：" + strError);
                        }

                        if (patron_rep.StartInfo == null)
                            patron_rep.StartInfo = new BatchTaskStartInfo();   // 按照缺省值来

                        if (bLoop == true)
                        {
                            // 需要从断点启动
                            if (nRet == 1)
                                patron_rep.StartInfo.Start = "!breakpoint";  //strBreakPoint;

                            patron_rep.ClearProgressFile();   // 清除进度文件内容
                            patron_rep.StartWorkerThread();
                        }
#endif

        // 列出 书目库/读者库/订购库/期库/评注库/发票库/违约金库/预约到书库 检索途径信息
        // parameters:
        //      strLang 语言代码。一般为"zh"
        //      infos   返回检索途径信息数组
        // rights:
        //      需要 listbibliodbfroms 或 listdbfroms 或 order 权限
        // return:
        //      result.Value    -1 出错；0 当前系统中没有定义此类数据库; 1: 成功(有至少一个此类数据库)
        public LibraryServerResult ListBiblioDbFroms(
            string strDbType,
            string strLang,
            out BiblioDbFromInfo[] infos)
        {
            infos = null;

            string strError = "";

            LibraryServerResult result = this.PrepareEnvironment("ListBiblioDbFroms", true, true);
            if (result.Value == -1)
                return result;

            try
            {
                // 权限判断

                // 权限字符串
                if (StringUtil.IsInList("listbibliodbfroms", sessioninfo.RightsOrigin) == false
                    && StringUtil.IsInList("listdbfroms", sessioninfo.RightsOrigin) == false
                    && StringUtil.IsInList("order", sessioninfo.RightsOrigin) == false)
                {
                    result.Value = -1;
                    result.ErrorInfo = "列出书目库检索途径 被拒绝。不具备order或listbibliodbfroms或listdbfroms权限。";
                    result.ErrorCode = ErrorCode.AccessDenied;
                    return result;
                }

                strError = EnsureKdbs(false);
                if (strError != null)
                    goto ERROR1;

                if (string.IsNullOrEmpty(strDbType) == true)
                    strDbType = "biblio";

                // long lRet = 0;

                List<string> dbnames = null;
                if (strDbType == "reader")
                {
                    dbnames = app.GetCurrentReaderDbNameList(sessioninfo.LibraryCodeList);
                }
                else
                {
                    int nRet = app.GetDbNames(
                        strDbType,
                        out dbnames,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                }

#if NO
                List<string> dbnames = new List<string>();

                string strDbTypeName = "";

                if (strDbType == "biblio")
                {
                    strDbTypeName = "书目";
                    for (int i = 0; i < app.ItemDbs.Count; i++)
                    {
                        // 实体库对应的书目库名
                        string strBiblioDbName = app.ItemDbs[i].BiblioDbName;

                        if (String.IsNullOrEmpty(strBiblioDbName) == false)
                            dbnames.Add(strBiblioDbName);
                    }
                }
                else if (strDbType == "reader")
                {
                    strDbTypeName = "读者";
                    dbnames = app.GetCurrentReaderDbNameList(sessioninfo.LibraryCodeList);
                }
                else if (strDbType == "item")   // 2012/5/5
                {
                    strDbTypeName = "实体";
                    for (int i = 0; i < app.ItemDbs.Count; i++)
                    {
                        // 实体库名
                        string strItemDbName = app.ItemDbs[i].DbName;

                        if (String.IsNullOrEmpty(strItemDbName) == false)
                            dbnames.Add(strItemDbName);
                    }
                }
                else if (strDbType == "issue")   // 2012/5/5
                {
                    strDbTypeName = "期";
                    for (int i = 0; i < app.ItemDbs.Count; i++)
                    {
                        // 期库名
                        string strIssueDbName = app.ItemDbs[i].IssueDbName;

                        if (String.IsNullOrEmpty(strIssueDbName) == false)
                            dbnames.Add(strIssueDbName);
                    }
                }
                else if (strDbType == "order")   // 2012/5/5
                {
                    strDbTypeName = "订购";
                    for (int i = 0; i < app.ItemDbs.Count; i++)
                    {
                        // 订购库名
                        string strOrderDbName = app.ItemDbs[i].OrderDbName;

                        if (String.IsNullOrEmpty(strOrderDbName) == false)
                            dbnames.Add(strOrderDbName);
                    }
                }
                else if (strDbType == "comment")   // 2012/5/5
                {
                    strDbTypeName = "评注";
                    for (int i = 0; i < app.ItemDbs.Count; i++)
                    {
                        // 实体库名
                        string strCommentDbName = app.ItemDbs[i].CommentDbName;

                        if (String.IsNullOrEmpty(strCommentDbName) == false)
                            dbnames.Add(strCommentDbName);
                    }
                }
                else if (strDbType == "invoice")
                {
                    strDbTypeName = "发票";
                    if (string.IsNullOrEmpty(app.InvoiceDbName) == false)
                        dbnames.Add(app.InvoiceDbName);
                }
                else if (strDbType == "amerce")
                {
                    strDbTypeName = "违约金";
                    if (string.IsNullOrEmpty(app.AmerceDbName) == false)
                        dbnames.Add(app.AmerceDbName);
                }
                else
                {
                    strError = "未知的数据库类型 '"+strDbType+"'。应为biblio reader item issue order comment invoice amerce之一";
                    goto ERROR1;
                }
#endif

                StringUtil.RemoveDupNoSort(ref dbnames);

                if (dbnames.Count == 0)
                {
                    result.Value = 0;
                    result.ErrorInfo = "当前系统中没有定义此类数据库，所以无法获知其检索途径信息";

                    return result;
                }

                // 可以当时现列出，并不存储?
                // 不存储的缺点是，等到发出检索式的时候，就不知道哪个库有哪些style值了。
                // 后退一步：caption可以现列出，但是style值需要预先初始化和存储起来，供检索时构造检索式用
                List<From> froms = new List<From>();

                for (int i = 0; i < dbnames.Count; i++)
                {
                    string strDbName = dbnames[i];

                    if (String.IsNullOrEmpty(strDbName) == true)
                    {
                        Debug.Assert(false, "");
                        continue;
                    }

                    /*
                    // 2011/12/17
                    if (app.kdbs == null)
                    {
                        app.ActivateManagerThreadForLoad();
                        strError = "app.kdbs == null。故障原因请检查dp2Library日志";
                        goto ERROR1;
                    }
                     * */

                    KernelDbInfo db = app.kdbs.FindDb(strDbName);

                    if (db == null)
                    {
                        strError = "kdbs中没有关于"+LibraryApplication.GetDbTypeName(strDbType)+"数据库 '" + strDbName + "' 的信息";
                        goto ERROR1;
                    }

                    // 把所有库的from累加起来
                    froms.AddRange(db.Froms);
                }

                // 根据style值去重
                if (dbnames.Count > 1)
                {
                    if (strDbType != "biblio")
                        KernelDbInfoCollection.RemoveDupByCaption(ref froms,
                            strLang);
                    else
                        KernelDbInfoCollection.RemoveDupByStyle(ref froms);
                }

                List<BiblioDbFromInfo> info_list = new List<BiblioDbFromInfo>();

                int nIndexOfID = -1;    // __id途径所在的下标

                for (int i = 0; i < froms.Count; i++)
                {
                    From from = froms[i];

                    Caption caption = from.GetCaption(strLang);
                    if (caption == null)
                    {
                        caption = from.GetCaption(null);
                        if (caption == null)
                        {
                            strError = "有一个from事项的captions不正常";
                            goto ERROR1;
                        }
                    }

                    if (caption.Value == "__id")
                        nIndexOfID = i;

                    BiblioDbFromInfo info = new BiblioDbFromInfo();
                    info.Caption = caption.Value;
                    info.Style = from.Styles;

                    info_list.Add(info);
                }

                // 如果曾经出现过 __id caption
                if (nIndexOfID != -1)
                {
                    BiblioDbFromInfo temp = info_list[nIndexOfID];
                    info_list.RemoveAt(nIndexOfID);
                    info_list.Add(temp);
                }

                infos = new BiblioDbFromInfo[info_list.Count];
                info_list.CopyTo(infos);

                result.Value = 1;
                result.ErrorInfo = "";

                return result;
                /*
            ERROR1:
                result.Value = -1;
                result.ErrorInfo = strError;
                result.ErrorCode = ErrorCode.SystemError;
                return result;
                 * */
            }
            catch (Exception ex)
            {
                string strErrorText = "dp2Library ListBiblioDbFroms() API出现异常: " + ExceptionUtil.GetDebugText(ex);
                app.WriteErrorLog(strErrorText);

                result.Value = -1;
                result.ErrorCode = ErrorCode.SystemError;
                result.ErrorInfo = strErrorText;
                return result;
            }
        ERROR1:
            result.Value = -1;
            result.ErrorInfo = strError;
            result.ErrorCode = ErrorCode.SystemError;
            return result;
        }

		~~~

		        // 根据源代码文件获得Xml到Html转换的Assembly对象
        public int GetXml2HtmlAssembly(
            string strCodeFileName,
            string strRefFileName,
            string strBinDir,
            out Assembly assembly,
            out string strError)
        {
            strError = "";
            assembly = null;
            int nRet = 0;

#if NO
            // 看看是否已经存在
            this.m_lockXml2HtmlAssemblyTable.AcquireReaderLock(m_nLockTimeout);
            try
            {
                assembly = (Assembly)this.Xml2HtmlAssemblyTable[strCodeFileName.ToLower()];
            }
            finally
            {
                this.m_lockXml2HtmlAssemblyTable.ReleaseReaderLock();
            }
#endif
            assembly = this.AssemblyCache.FindObject(strCodeFileName);

            // 优化
            if (assembly != null)
                return 1;

            string strCode = "";    // c#代码

            // 装入code?
            try
            {
                using (StreamReader sr = new StreamReader(strCodeFileName, true))
                {
                    strCode = sr.ReadToEnd();
                }
            }
            catch (Exception ex)
            {
                strError = ExceptionUtil.GetAutoText(ex);
                return -1;
            }

            string[] saAddRef1 = {

                                    // 2011/9/3 增加
                                    "system.dll",
                                    "system.drawing.dll",
                                    "system.web.dll",
                                    "system.xml.dll",
                                    "System.Runtime.Serialization.dll",

										 strBinDir + "\\digitalplatform.marcdom.dll",
										 strBinDir + "\\digitalplatform.marckernel.dll",
										 strBinDir + "\\digitalplatform.rms.client.dll",
										 strBinDir + "\\digitalplatform.libraryserver.dll",
										 strBinDir + "\\digitalplatform.dll",
										 strBinDir + "\\digitalplatform.Text.dll",
										 strBinDir + "\\digitalplatform.IO.dll",
										 strBinDir + "\\digitalplatform.Xml.dll",
										 // strBinDir + "\\dp2rms.exe",
										 };

            string strWarning = "";
            string strLibPaths = "";

            string[] saRef2 = null;

            if (String.IsNullOrEmpty(strRefFileName) == false)
            {
                // 从references.xml文件中得到refs字符串数组
                // return:
                //		-1	error
                //		0	not found file
                //		1	found file
                nRet = ScriptManager.GetRefs(strRefFileName,
                    out saRef2,
                    out strError);
                if (nRet == -1)
                {
                    strError = "ref文件 '" + strRefFileName + "' 出错: " + strError;
                    return -1;
                }
            }

            string[] saRef = null;
            if (saRef2 != null)
            {
                saRef = new string[saRef2.Length + saAddRef1.Length];
                Array.Copy(saRef2, saRef, saRef2.Length);
                Array.Copy(saAddRef1, 0, saRef, saRef2.Length, saAddRef1.Length);
            }
            else
                saRef = saAddRef1;

            // 创建Script的Assembly
            // 本函数内对saRef不再进行宏替换
            nRet = ScriptManager.CreateAssembly_1(strCode,
                saRef,
                strLibPaths,
                out assembly,
                out strError,
                out strWarning);

            if (nRet == -2)
                goto ERROR1;
            if (nRet == -1)
            {
                strError = "文件 '" + strCodeFileName + "' 编译出错: " + strError;
                if (strWarning == "")
                {
                    goto ERROR1;
                }
                // MessageBox.Show(this, strWarning);

            }

#if NO
            // 加入hashtable
            this.m_lockXml2HtmlAssemblyTable.AcquireWriterLock(m_nLockTimeout);
            try
            {
                this.Xml2HtmlAssemblyTable[strCodeFileName.ToLower()] = assembly;
            }
            finally
            {
                this.m_lockXml2HtmlAssemblyTable.ReleaseWriterLock();
            }
#endif
            this.AssemblyCache.SetObject(strCodeFileName, assembly);
            return 0;
        ERROR1:
            return -1;
        }


		~~~

		        public int PrepareMarcFilter(
            string strFilterFileName,
            out LoanFilterDocument filter,
            out string strError)
        {
            strError = "";

            // 看看是否有现成可用的对象
            filter = (LoanFilterDocument)this.Filters.GetFilter(strFilterFileName);

            if (filter != null)
            {
                // filter.FilterHost = host;
                return 1;
            }

            // 新创建
            // string strFilterFileContent = "";

            filter = new LoanFilterDocument();

            // filter.FilterHost = host;
            filter.strOtherDef = "FilterHost Host = null;";

            filter.strPreInitial = " LoanFilterDocument doc = (LoanFilterDocument)this.Document;\r\n";
            filter.strPreInitial += " Host = ("
                + "FilterHost" + ")doc.FilterHost;\r\n";

            try
            {
                filter.Load(strFilterFileName);
            }
            catch (Exception ex)
            {
                strError = ExceptionUtil.GetAutoText(ex);
                return -1;
            }

            string strCode = "";    // c#代码

            int nRet = filter.BuildScriptFile(out strCode,
                out strError);
            if (nRet == -1)
                goto ERROR1;

            Assembly assembly = null;
            assembly = this.AssemblyCache.FindObject(strFilterFileName);
            if (assembly != null)
            {
                filter.Assembly = assembly;
                return 0;
            }

            string[] saAddRef1 = {
                                    // 2011/9/3 增加
                                    "system.dll",
                                    "system.drawing.dll",
                                    "system.web.dll",
                                    "system.xml.dll",
                                    "System.Runtime.Serialization.dll",

										 this.BinDir + "\\digitalplatform.marcdom.dll",
										 this.BinDir + "\\digitalplatform.marckernel.dll",
										 this.BinDir + "\\digitalplatform.libraryserver.dll",
										 this.BinDir + "\\digitalplatform.dll",
										 this.BinDir + "\\digitalplatform.Text.dll",
										 this.BinDir + "\\digitalplatform.IO.dll",
										 this.BinDir + "\\digitalplatform.Xml.dll",
										 this.BinDir + "\\digitalplatform.script.dll",
										 this.BinDir + "\\digitalplatform.marcquery.dll",
										 /*strMainCsDllName*/ };

            string strWarning = "";
            string strLibPaths = "";

            string[] saRef2 = filter.GetRefs();

            string[] saRef = new string[saRef2.Length + saAddRef1.Length];
            Array.Copy(saRef2, saRef, saRef2.Length);
            Array.Copy(saAddRef1, 0, saRef, saRef2.Length, saAddRef1.Length);

            // 创建Script的Assembly
            // 本函数内对saRef不再进行宏替换
            nRet = ScriptManager.CreateAssembly_1(strCode,
                saRef,
                strLibPaths,
                out assembly,
                out strError,
                out strWarning);
            if (nRet == -2)
                goto ERROR1;
            if (nRet == -1)
            {
                if (strWarning == "")
                {
                    goto ERROR1;
                }
                // MessageBox.Show(this, strWarning);
            }

            filter.Assembly = assembly;
            this.AssemblyCache.SetObject(strFilterFileName, assembly);
            return 0;
        ERROR1:
            return -1;
        }



		~~~
		        // 重设密码
        // parameters:
        //      strMessageTempate   消息文字模板。其中可以使用 %name% %barcode% %temppassword% %expiretime% %period% 等宏
        //      strMessage  返回拟发送给读者的消息文字
        // return:
        //      -1  出错
        //      0   因为条件不具备功能没有成功执行
        //      1   功能成功执行
        public int ResetPassword(
            // string strLibraryCodeList,
            string strParameters,
            string strMessageTemplate,
            out string strMessage,
            out string strError)
        {
            strError = "";
            strMessage = "";

            MessageInterface external_interface = this.GetMessageInterface("sms");

            Hashtable parameters = StringUtil.ParseParameters(strParameters, ',', '=');
            string strLoginName = (string)parameters["barcode"];
            string strNameParam = (string)parameters["name"];
            string strTelParam = (string)parameters["tel"];
            string strLibraryCodeList = (string)parameters["librarycode"];  // 控制检索读者记录的范围

            string strStyle = (string)parameters["style"];
            if (StringUtil.IsInList("returnMessage", strStyle) == false)
            {
                // 直接给调用者返回拟发送到手机短信的内容。要求调用者具有特殊权限才行，要求在调用本函数前判断好。
            }
            else
            {
                if (external_interface == null)
                {
                    strError = "当前系统尚未配置短消息 (sms) 接口，无法进行重设密码的操作";
                    return -1;
                }
            }

            if (string.IsNullOrEmpty(strLoginName) == true)
            {
                strError = "缺乏 barcode 参数";
                return -1;
            }
            if (string.IsNullOrEmpty(strNameParam) == true)
            {
                strError = "缺乏 name 参数";
                return -1;
            }
            if (string.IsNullOrEmpty(strTelParam) == true)
            {
                strError = "缺乏 tel 参数";
                return -1;
            }

            // 判断电话号码是否为手机号码
            if (strTelParam.Length != 11)
            {
                strError = "所提供的电话号码应该是 11 位的手机号码";
                return 0;
            }

            string strXml = "";
            string strOutputPath = "";

            byte[] timestamp = null;

            // 临时的SessionInfo对象
            SessionInfo sessioninfo = new SessionInfo(this);
            try
            {
                RmsChannel channel = sessioninfo.Channels.GetChannel(this.WsUrl);
                if (channel == null)
                {
                    strError = "get channel error";
                    return -1;
                }

                bool bTempPassword = false;
                string strToken = "";
                // 获得读者记录
                // return:
                //      -2  当前没有配置任何读者库，或者可以操作的读者库
                //      -1  error
                //      0   not found
                //      1   命中1条
                //      >1  命中多于1条
                int nRet = this.GetReaderRecXmlForLogin(
                    // sessioninfo.Channels,
                    channel,
                    strLibraryCodeList,
                    strLoginName,
                    null,
                    -1,
                    sessioninfo.ClientIP,
                    null,
                    out bTempPassword,
                    out strXml,
                    out strOutputPath,
                    out timestamp,
                    out strToken,
                    out strError);
                if (nRet == -1 || nRet == -2)
                {
                    strError = "以登录名 '" + strLoginName + "' 检索读者记录出错: " + strError;
                    return -1;
                }
                if (nRet == 0)
                {
                    strError = "读者帐户 '" + strLoginName + "' 不存在";
                    return 0;
                }
                if (nRet > 1)
                {
                    strError = "登录名 '" + strLoginName + "' 所匹配的帐户多于一个";
                    return 0;
                }

                Debug.Assert(nRet == 1);

                string strLibraryCode = "";
                // 获得读者库的馆代码
                // return:
                //      -1  出错
                //      0   成功
                nRet = GetLibraryCode(
                    strOutputPath,
                    out strLibraryCode,
                    out strError);
                if (nRet == -1)
                    return -1;

                XmlDocument readerdom = null;
                nRet = LibraryApplication.LoadToDom(strXml,
                    out readerdom,
                    out strError);
                if (nRet == -1)
                {
                    strError = "装载读者记录进入XML DOM时发生错误: " + strError;
                    return -1;
                }

                // 观察 password 元素的 lastResetTime 属性，需在规定的时间长度以外才能再次进行重设

                string strBarcode = DomUtil.GetElementText(readerdom.DocumentElement, "barcode");
                {
                    string strPrefix = "";
                    string strValue = "";
                    // 将登录名切割为前缀和名字值两个部分
                    SplitLoginName(strLoginName,
                out strPrefix,
                out strValue);

                    if (string.IsNullOrEmpty(strPrefix) == true)
                    {
                        // 核对 barcode
                        if (strBarcode.Trim() != strLoginName.Trim())
                        {
                            strError = "证条码号不匹配";
                            return -1;
                        }
                    }
                    if (strPrefix == "EM:") // 注意，整个 strLoginName 应该是 EM:email:xxxxx 这样的形态
                    {
                        // 核对 Email
                        string strEmail = DomUtil.GetElementText(readerdom.DocumentElement, "email");
                        if (StringUtil.SplitList(strEmail).IndexOf(strValue) == -1)
                        {
                            strError = "地址 '" + strValue + "' 不匹配";
                            return -1;
                        }
                    }
                    if (strPrefix == "TP:")
                    {
                        // 核对 电话号码
                        string strTel1 = DomUtil.GetElementText(readerdom.DocumentElement, "tel");
                        if (StringUtil.SplitList(strTel1).IndexOf(strValue) == -1)
                        {
                            strError = "电话号码不匹配";
                            return -1;
                        }
                    }
                    if (strPrefix == "ID:")
                    {
                        // 核对 身份证号
                        string strID = DomUtil.GetElementText(readerdom.DocumentElement, "idCardNumber");
                        if (strID != strValue)
                        {
                            strError = "身份证号不匹配";
                            return -1;
                        }
                    }
                    if (strPrefix == "CN:")
                    {
                        // 核对 身份证号
                        string strCN = DomUtil.GetElementText(readerdom.DocumentElement, "cardNumber");
                        if (strCN != strValue)
                        {
                            strError = "证号不匹配";
                            return -1;
                        }
                    }
                }

                // 核对 name
                string strName = DomUtil.GetElementText(readerdom.DocumentElement, "name");
                if (strName.Trim() != strNameParam.Trim())
                {
                    strError = "姓名不匹配";
                    return 0;
                }

                // 核对 tel
                string strTel = DomUtil.GetElementText(readerdom.DocumentElement, "tel");
                if (string.IsNullOrEmpty(strTel) == true)
                {
                    strError = "读者记录中没有登记电话号码，无法进行重设密码的操作";
                    return 0;
                }

                string strResultTel = ""; ;
                string[] tels = strTel.Split(new char[] { ',', ';' }, StringSplitOptions.RemoveEmptyEntries);
                foreach (string tel in tels)
                {
                    string strOneTel = tel.Trim();
                    if (strOneTel == strTelParam.Trim())
                    {
                        strResultTel = strOneTel;
                        break;
                    }
                }

                if (string.IsNullOrEmpty(strResultTel) == true)
                {
                    strError = "所提供的电话号码和读者记录中的电话号码不匹配";
                    return -1;
                }

                DateTime end;
                // 观察在 password 元素 tempPasswordExpire 属性中残留的失效期，必须在这个时间以后才能进行本次操作
                // parameters:
                //      now 当前时间。本地时间
                // return:
                //      -1  出错
                //      0   已经过了失效期
                //      1   还在失效期以内
                nRet = CheckOldExpireTime(readerdom,
                    this.Clock.Now,
                    out end,
                    out strError);
                if (nRet == -1)
                    return -1;
                if (nRet == 1)
                {
                    strError = "本次重设密码的操作距离上次操作间隔不足一小时，操作被拒绝。请在 " + end.ToShortTimeString() + " 以后再进行操作";
                    return 0;
                }

                // 重新设定一个密码
                Random rnd = new Random();
                string strReaderTempPassword = rnd.Next(1, 999999).ToString();

                DateTime expire = this.Clock.Now + new TimeSpan(1, 0, 0);   // 本地时间
                string strExpireTime = DateTimeUtil.Rfc1123DateTimeStringEx(expire);

                if (StringUtil.IsInList("returnMessage", strStyle) == true)
                {
                    // 直接给调用者返回消息内容。消息内容中有临时密码，属于敏感信息，要求调用者具有特殊权限才行。
                    Hashtable table = new Hashtable();
                    table["tel"] = strTelParam;
                    table["barcode"] = strBarcode;
                    table["name"] = strName;
                    table["tempPassword"] = strReaderTempPassword;
                    table["expireTime"] = expire.ToLongTimeString();
                    table["period"] = "一小时";
                    table["refID"] = DomUtil.GetElementText(readerdom.DocumentElement, "refID");    // 在所提供的姓名或者电话号码命中不止一条读者记录的情形，调用者后面使用读者记录的 refID 来绑定特别重要。
                    strMessage = BuildMessageXml(table);
                }
                else
                {
                    if (string.IsNullOrEmpty(strMessageTemplate) == true)
                        strMessageTemplate = "%name% 您好！\n您的读者帐户(证条码号为 %barcode%)已设临时密码 %temppassword%，在 %period% 内登录会成为正式密码";

                    string strBody = strMessageTemplate.Replace("%barcode%", strBarcode)
                        .Replace("%name%", strName)
                        .Replace("%temppassword%", strReaderTempPassword)
                        .Replace("%expiretime%", expire.ToLongTimeString())
                        .Replace("%period%", "一小时");
                    // string strBody = "读者(证条码号) " + strBarcode + " 的帐户密码已经被重设为 " + strReaderNewPassword + "";

                    // 向手机号码发送短信
                    {
                        // 发送消息
                        try
                        {
                            // 发送一条消息
                            // parameters:
                            //      strPatronBarcode    读者证条码号
                            //      strPatronXml    读者记录XML字符串。如果需要除证条码号以外的某些字段来确定消息发送地址，可以从XML记录中取
                            //      strMessageText  消息文字
                            //      strError    [out]返回错误字符串
                            // return:
                            //      -1  发送失败
                            //      0   没有必要发送
                            //      >=1   发送成功，返回实际发送的消息条数
                            nRet = external_interface.HostObj.SendMessage(
                                strBarcode,
                                readerdom.DocumentElement.OuterXml,
                                strBody,
                                strLibraryCode,
                                out strError);
                        }
                        catch (Exception ex)
                        {
                            strError = external_interface.Type + " 类型的外部消息接口Assembly中SendMessage()函数抛出异常: " + ex.Message;
                            nRet = -1;
                        }
                        if (nRet == -1)
                        {
                            strError = "向读者 '" + strBarcode + "' 发送" + external_interface.Type + " message时出错: " + strError;
                            if (this.Statis != null)
                                this.Statis.IncreaseEntryValue(
                                strLibraryCode,
                                "重设密码通知",
                                external_interface.Type + " message 重设密码通知消息发送错误数",
                                1);
                            this.WriteErrorLog(strError);
                            return -1;
                        }
                        else
                        {
                            if (this.Statis != null)
                                this.Statis.IncreaseEntryValue(
            strLibraryCode,
            "重设密码通知",
            external_interface.Type + " message 重设密码通知消息发送数",
            nRet);  // 短信条数可能多于次数
                            if (this.Statis != null)
                                this.Statis.IncreaseEntryValue(strLibraryCode,
                                "重设密码通知",
                                external_interface.Type + " message 重设密码通知人数",
                                1);
                        }
                    }
                }

                byte[] output_timestamp = null;
                nRet = ChangeReaderTempPassword(
        sessioninfo,
        strOutputPath,
        readerdom,
        strReaderTempPassword,
        strExpireTime,
        timestamp,
        out output_timestamp,
        out strError);
                if (nRet == -1)
                    return -1;  // 此时短信已经发出，但临时密码并未修改成功

            }
            finally
            {
                sessioninfo.CloseSession();
                sessioninfo = null;
            }

            if (StringUtil.IsInList("returnMessage", strStyle) == false)
                strError = "临时密码已通过短信方式发送到手机 " + strTelParam + "。请按照手机短信提示进行操作";
            return 1;
        }


		~~~~~~~~~~~~~
		        // 获得系统参数
        // parameters:
        //      strCategory 参数所在目录
        //      strName 参数名
        //      strValue    返回参数值
        // rights:
        //      需要 getsystemparameter 权限
        // return:
        //      result.Value    -1 错误；0 没有得到所要求的参数值；1 得到所要求的参数值
        public LibraryServerResult GetSystemParameter(
            string strCategory,
            string strName,
            out string strValue)
        {
            string strError = "";
            strValue = "";

            LibraryServerResult result = this.PrepareEnvironment("GetSystemParameter", true, true, true);
            if (result.Value == -1)
                return result;

            // 2016/5/3
            // 两个参数都为空的情况，可以用来迫使前端登录一次
            if (string.IsNullOrEmpty(strCategory) == true
                && string.IsNullOrEmpty(strName) == true)
                return result;

            app.LockForRead();
            try
            {
                // 权限判断
                if (StringUtil.IsInList("getsystemparameter", sessioninfo.RightsOrigin) == false
                    && StringUtil.IsInList("order", sessioninfo.RightsOrigin) == false)
                {
                    result.Value = -1;
                    result.ErrorInfo = "获得系统参数的操作被拒绝。不具备 order 或 getsystemparameter 权限。";
                    result.ErrorCode = ErrorCode.AccessDenied;
                    return result;
                }

                int nRet = 1;

                if (strCategory == "listUploadFileNames")
                {
                    try
                    {
                        string strDirectory = Path.Combine(app.DataDir, "upload/" + strName);

                        strDirectory = strDirectory.Replace("\\", "/");
                        if (strDirectory[strDirectory.Length - 1] != '/')
                            strDirectory += "/";

                        // 文件名之间的分隔符为 ||，文件名中，和最后修改时间用 | 间隔
                        List<string> filenames = new List<string>();
                        DirectoryInfo di = new DirectoryInfo(strDirectory);

                        // 列出所有目录名
                        DirectoryInfo[] subs = di.GetDirectories();
                        for (int i = 0; i < subs.Length; i++)
                        {
                            DirectoryInfo sub = subs[i];
                            filenames.Add(MakeFileName(sub));
                            // filenames.AddRange(GetFilenames(sub.FullName, true, true));
                        }

                        // 列出所有文件名
                        FileInfo[] fis = di.GetFiles();
                        foreach (FileInfo fi in fis)
                        {
                            filenames.Add(MakeFileName(fi));
                        }

                        StringBuilder text = new StringBuilder(4096);
                        string strHead = strDirectory;
                        foreach (string strFilename in filenames)
                        {
                            if (text.Length > 0)
                                text.Append("||");

                            text.Append(strFilename);

                            // 只取出相对部分
                            // text.Append(strFilename.Substring(strHead.Length));
                        }

                        strValue = text.ToString();
                        goto END1;
                    }
                    catch (DirectoryNotFoundException ex)
                    {
                        strError = "目录 '" + strName + "' 不存在";
                        goto ERROR1;
                    }
                }

                if (strCategory == "cfgs")
                {
                    // 2015/4/30
                    if (strName == "getDataDir")
                    {
                        strValue = app.DataDir;
                        goto END1;
                    }
                    if (strName == "listFileNames")
                    {
                        List<string> filenames = new List<string>();
                        DirectoryInfo di = new DirectoryInfo(app.DataDir + "/cfgs");
                        DirectoryInfo[] subs = di.GetDirectories();
                        for (int i = 0; i < subs.Length; i++)
                        {
                            DirectoryInfo sub = subs[i];
                            filenames.AddRange(GetFilenames(sub.FullName, false, true));
                        }

                        string strHead = app.DataDir + "/cfgs/";
                        foreach (string strFilename in filenames)
                        {
                            if (string.IsNullOrEmpty(strValue) == false)
                                strValue += ",";
                            // 只取出相对部分
                            strValue += strFilename.Substring(strHead.Length);
                        }

                        goto END1;
                    }
                    if (strName == "listFileNamesEx")
                    {
                        // 文件名之间的分隔符为 ||，文件名中，和最后修改时间用 | 间隔
                        List<string> filenames = new List<string>();
                        DirectoryInfo di = new DirectoryInfo(Path.Combine(app.DataDir, "cfgs"));
                        DirectoryInfo[] subs = di.GetDirectories();
                        for (int i = 0; i < subs.Length; i++)
                        {
                            DirectoryInfo sub = subs[i];
                            filenames.AddRange(GetFilenames(sub.FullName, true, true));
                        }

                        StringBuilder text = new StringBuilder(4096);
                        string strHead = Path.Combine(app.DataDir, "cfgs/");
                        foreach (string strFilename in filenames)
                        {
                            if (text.Length > 0)
                                text.Append("||");
                            // 只取出相对部分
                            text.Append(strFilename.Substring(strHead.Length));
                        }

                        strValue = text.ToString();
                        goto END1;
                    }
#if NO
                    // 取得文件内容
                    if (StringUtil.HasHead(strName, "getfile:") == true)
                    {
                        string strFileName = strName.Substring("getfile:".Length);

                        string strFilePath = app.DataDir + "/cfgs/" + strFileName;

                        Encoding encoding = null;
                        // return:
                        //      -1  出错
                        //      0   文件不存在
                        //      1   文件存在
                        //      2   读入的内容不是全部
                        nRet = FileUtil.ReadTextFileContent(strFilePath,
                            1024 * 1024,    // 1M
                            out strValue,
                            out encoding,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        if (nRet == 0)
                        {
                            strError = "文件 '" + strFileName + "' 不存在";
                            goto ERROR1;
                        }
                        if (nRet == 2)
                        {
                            strError = "文件 '" + strFileName + "' 尺寸太大";
                            goto ERROR1;
                        }

                        nRet = 1;
                    }
#endif
                }

                // 获得内核配置文件的时间戳?
                if (strCategory == "cfgs/get_res_timestamps")
                {
                    string[] filenames = strName.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries); // RemoveEmptyEntries 2013/12/12
                    // TODO: 
                    RmsChannel channel = sessioninfo.Channels.GetChannel(app.WsUrl);
                    if (channel == null)
                    {
                        strError = "get channel error";
                        goto ERROR1;
                    }
                    StringBuilder text = new StringBuilder(4096);
                    foreach (string filename in filenames)
                    {
                        string strXml = "";
                        string strMetaData = "";
                        byte[] timestamp = null;
                        string strOutputPath = "";
                        long lRet = channel.GetRes(filename,
        "timestamp",
        out strXml,
        out strMetaData,
        out timestamp,
        out strOutputPath,
        out strError);
                        if (lRet == -1)
                        {
                            if (channel.ErrorCode == ChannelErrorCode.NotFound)
                                continue;
                            goto ERROR1;
                        }
                        if (text.Length > 0)
                            text.Append(",");
                        text.Append(filename + "|" + ByteArray.GetHexTimeStampString(timestamp));
                    }
                    strValue = text.ToString();
                    goto END1;
                }

                if (strCategory == "center")
                {
                    if (strName == "def")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("center");
                        if (root == null)
                        {
                            strValue = "";
                            nRet = 0;
                        }
                        else
                        {
                            // 将密码变成明文
                            strValue = root.OuterXml;
                            if (string.IsNullOrEmpty(strValue) == false)
                            {
                                XmlDocument temp = new XmlDocument();
                                temp.LoadXml(strValue);
                                XmlNodeList nodes = temp.DocumentElement.SelectNodes("//server");
                                foreach (XmlNode node in nodes)
                                {
                                    string strPassword = DomUtil.GetAttr(node, "password");
                                    strPassword = LibraryApplication.DecryptPassword(strPassword);
                                    DomUtil.SetAttr(node, "password", strPassword);
                                }
                                strValue = temp.DocumentElement.OuterXml;
                            }
                        }

                        goto END1;
                    }

                    strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                    goto NOTFOUND;
                }

                if (strCategory == "system")
                {
                    // 2016/6/25
                    // MSMQ 队列名
                    if (strName == "outgoingQueue")
                    {
                        strValue = app.OutgoingQueue;
                        goto END1;
                    }

                    // 2016/4/6
                    // 获得系统的临时文件目录
                    if (strName == "systemTempDir")
                    {
                        string strTempFileName = Path.GetTempFileName();
                        File.Delete(strTempFileName);
                        strValue = Path.GetDirectoryName(strTempFileName);
                        goto END1;
                    }

                    if (strName == "libraryCodes")
                    {
                        List<string> librarycodes = new List<string>();
                        XmlNodeList nodes = app.LibraryCfgDom.DocumentElement.SelectNodes("readerdbgroup/database");
                        foreach (XmlNode node in nodes)
                        {
                            string strLibraryCode = DomUtil.GetAttr(node, "libraryCode");
                            if (string.IsNullOrEmpty(strLibraryCode) == true)
                                continue;
                            librarycodes.Add(strLibraryCode);
                        }

                        nodes = app.LibraryCfgDom.DocumentElement.SelectNodes("rightsTable/library");
                        foreach (XmlNode node in nodes)
                        {
                            string strLibraryCode = DomUtil.GetAttr(node, "code");
                            if (string.IsNullOrEmpty(strLibraryCode) == true)
                                continue;
                            librarycodes.Add(strLibraryCode);
                        }

                        StringUtil.RemoveDupNoSort(ref librarycodes);
                        strValue = StringUtil.MakePathList(librarycodes);
                        goto END1;
                    }

                    if (strName == "arrived")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("arrived");
                        if (root == null)
                        {
                            strValue = "";
                            nRet = 0;
                        }
                        else
                            strValue = root.OuterXml;

                        goto END1;
                    }

                    // 2009/10/23 
                    // 获得<itemdbgroup>元素下级XML
                    if (strName == "biblioDbGroup")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("itemdbgroup");
                        if (root == null)
                        {
                            strValue = "";
                            nRet = 0;
                            // 注: 返回值为0，字符串为空，错误码不是NotFound，表示想关节点找到了，但值为空
                        }
                        else
                        {
                            XmlDocument dom = new XmlDocument();
                            try
                            {
                                dom.LoadXml(root.OuterXml);
                            }
                            catch (Exception ex)
                            {
                                strError = "<itemdbgroup>元素XML片段装入DOM时出错: " + ex.Message;
                                goto ERROR1;
                            }

                            strError = EnsureKdbs(false);
                            if (strError != null)
                                goto ERROR1;

                            // 将name属性名修改为itemDbName属性
                            // TODO: 将来library.xml格式修改后，这部分可以免去了
                            XmlNodeList nodes = dom.DocumentElement.SelectNodes("database");
                            for (int i = 0; i < nodes.Count; i++)
                            {
                                XmlNode node = nodes[i];
                                string strItemDbName = DomUtil.GetAttr(node, "name");
                                DomUtil.SetAttr(node, "name", null);
                                DomUtil.SetAttr(node, "itemDbName", strItemDbName);

                                // 2012/7/2
                                // 加入各个数据库的多语种名字

                                // 实体库
                                AppendCaptions(node, "itemDbName");

                                // 订购库
                                AppendCaptions(node, "orderDbName");

                                // 期库
                                AppendCaptions(node, "issueDbName");

                                // 评注库
                                AppendCaptions(node, "commentDbName");

                                // 书目库
                                AppendCaptions(node, "biblioDbName");
                            }

                            strValue = dom.DocumentElement.InnerXml;
                        }

                        goto END1;
                    }

                    // 2012/9/12
                    // 获得<readerdbgroup>元素下级XML
                    if (strName == "readerDbGroup")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("readerdbgroup");
                        if (root == null)
                        {
                            strValue = "";
                            nRet = 0;
                            // 注: 返回值为0，字符串为空，错误码不是NotFound，表示相关节点找到了，但值为空
                            goto END1;
                        }

                        if (sessioninfo.GlobalUser == true)
                            strValue = root.InnerXml;
                        else
                        {
                            // 过滤掉当前用户不能管辖的读者库名
                            XmlDocument dom = new XmlDocument();
                            try
                            {
                                dom.LoadXml(root.OuterXml);
                            }
                            catch (Exception ex)
                            {
                                strError = "<readerdbgroup>元素XML片段装入DOM时出错: " + ex.Message;
                                goto ERROR1;
                            }

                            XmlNodeList nodes = dom.DocumentElement.SelectNodes("database");
                            for (int i = 0; i < nodes.Count; i++)
                            {
                                XmlNode node = nodes[i];
                                string strLibraryCode = DomUtil.GetAttr(node, "libraryCode");

                                if (StringUtil.IsInList(strLibraryCode, sessioninfo.LibraryCodeList) == false)
                                {
                                    node.ParentNode.RemoveChild(node);
                                }
                            }

                            strValue = dom.DocumentElement.InnerXml;
                        }

                        goto END1;
                    }

                    strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                    goto NOTFOUND;
                }

                // OPAC检索
                if (strCategory == "opac")
                {
                    // TODO: 和def重复了，需要合并
                    // 获得<virtualDatabases>元素下级XML
                    if (strName == "databases")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("virtualDatabases");
                        if (root == null)
                        {
                            strValue = "";
                            nRet = 0;
                        }
                        else
                            strValue = root.InnerXml;

                        goto END1;
                    }

                    // 获得<browseformats>元素下级XML
                    if (strName == "browseformats")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("browseformats");
                        if (root == null)
                        {
                            strValue = "";
                            nRet = 0;
                        }
                        else
                            strValue = root.InnerXml;

                        goto END1;
                    }

                    // 2011/2/15
                    if (strName == "serverDirectory")
                    {
                        /*
                        XmlNode node = app.LibraryCfgDom.SelectSingleNode("//opacServer");
                        if (node == null)
                        {
                            strValue = "";
                            nRet = 0;
                        }
                        else
                            strValue = DomUtil.GetAttr(node, "url");
                        */
                        strValue = app.OpacServerUrl;
                        goto END1;
                    }

                    strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                    goto NOTFOUND;
                }

                if (strCategory == "circulation")
                {
                    // 2016/1/1
                    if (strName == "chargingOperDatabase")
                    {
                        if (app.ChargingOperDatabase.Enabled == true)
                            strValue = "enabled";
                        else
                            strValue = "";
                        nRet = 1;
                        goto END1;
                    }

                    // <clientFineInterface>元素内容
                    // strValue中是OuterXml定义。
                    if (strName == "clientFineInterface")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("clientFineInterface");
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.OuterXml;
                        nRet = 1;
                        goto END1;
                    }

                    // <valueTables>元素内容
                    // strValue中是下级片断定义，没有<valueTables>元素作为根。
                    if (strName == "valueTables")
                    {
                        // 按照馆代码列表，返回<valueTables>内的适当片断
                        nRet = app.GetValueTablesXml(
                                sessioninfo.LibraryCodeList,
                                out strValue,
                                out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        nRet = 1;
                        goto END1;
                    }

                    // <rightsTable>元素内容
                    // strValue中是下级片断定义，没有<rightsTable>元素作为根。
                    if (strName == "rightsTable")
                    {
#if NO
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("rightsTable");   // 0.02前为rightstable
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
#endif
                        // 按照馆代码列表，返回<rightsTable>内的适当片断
                        nRet = app.GetRightsTableXml(
                                sessioninfo.LibraryCodeList,
                                out strValue,
                                out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        nRet = 1;
                        goto END1;
                    }

                    // (当前<rightsTable>)权限表的HTML形态
                    if (strName == "rightsTableHtml")
                    {
                        nRet = app.GetRightTableHtml(
                            "",
                            sessioninfo.LibraryCodeList,
                            out strValue,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        nRet = 1;
                        goto END1;
                    }

                    /*
                    // 2008/10/10 
                    // <readertypes>元素内容
                    // strValue中是下级片断定义，没有<readertypes>元素作为根。
                    if (strName == "readerTypes")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("rightsTable/readerTypes");   // 0.02前为readertypes
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
                    }

                    // 2008/10/10 
                    // <booktypes>元素内容
                    // strValue中是下级片断定义，没有<booktypes>元素作为根。
                    if (strName == "bookTypes")
                    {
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("rightsTable/bookTypes"); // 0.02前为booktypes
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
                    }*/

                    // 2008/10/10 
                    // <locationtypes>元素内容
                    // strValue中是下级片断定义，没有<locationTypes>元素作为根。
                    if (strName == "locationTypes")
                    {
#if NO
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("locationTypes"); // 0.02前为locationtypes
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
#endif
                        // 按照馆代码列表，返回<locationTypes>内的适当片断
                        nRet = app.GetLocationTypesXml(
                                sessioninfo.LibraryCodeList,
                                out strValue,
                                out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        nRet = 1;
                        goto END1;
                    }

                    // 2008/10/12 
                    // <zhongcihao>元素内容
                    // strValue中是下级片断定义，没有<zhongcihao>元素作为根。
                    if (strName == "zhongcihao")
                    {
                        // 分馆用户也能看到全部<zhongcihao>定义
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("zhongcihao");
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
                    }

                    // 2009/2/18 
                    // <callNumber>元素内容
                    // strValue中是下级片断定义，没有<callNumber>元素作为根。
                    if (strName == "callNumber")
                    {
                        // 分馆用户可以看到全部定义
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("callNumber");
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
                    }

                    // 2009/3/9 
                    // <dup>元素内容
                    // strValue中是下级片断定义，没有<dup>元素作为根。
                    if (strName == "dup")
                    {
                        // 分馆用户也能看到全部<dup>定义
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("dup");
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
                    }

                    // 2008/10/13 
                    // <script>元素内容
                    // strValue中是下级片断定义，没有<script>元素作为根。
                    if (strName == "script")
                    {
                        // 分馆用户也能看到全部<script>定义
                        XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode("script");
                        if (root == null)
                        {
                            nRet = 0;
                            goto END1;
                        }

                        strValue = root.InnerXml;
                        nRet = 1;
                        goto END1;
                    }

                    strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                    goto NOTFOUND;
                    /*
                    strError = "(strCategory为 '" + strCategory + "' 时)未知的strName值 '" + strName + "' ";
                    goto ERROR1;
                     * */
                }

                // 根据前端在strName参数中提供的rightstable xml字符串，立即创建rightsTableHtml字符串
                if (strCategory == "instance_rightstable_html")
                {
                    nRet = app.GetRightTableHtml(
                        strName,
                        sessioninfo.LibraryCodeList,
                        out strValue,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                    nRet = 1;
                    goto END1;
                }

                // 获得内核数据库原始定义
                if (strCategory == "database_def")
                {
                    // strName参数不能为空。本功能只能得到一个数据库的定义，如果要得到全部数据库的定义，请使用ManageDatabase API的getinfo子功能
                    nRet = app.vdbs.GetDatabaseDef(
                        strName,
                        out strValue,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                    goto END1;
                }

                // 实用库
                if (strCategory == "utilDb")
                {
                    switch (strName)
                    {
                        case "dbnames":
                            {
                                XmlNodeList nodes = app.LibraryCfgDom.DocumentElement.SelectNodes("//utilDb/database");
                                for (int i = 0; i < nodes.Count; i++)
                                {
                                    string strDbName = DomUtil.GetAttr(nodes[i], "name");
                                    if (i != 0)
                                        strValue += ",";
                                    strValue += strDbName;
                                }
                            }
                            break;
                        case "types":
                            {
                                XmlNodeList nodes = app.LibraryCfgDom.DocumentElement.SelectNodes("//utilDb/database");
                                for (int i = 0; i < nodes.Count; i++)
                                {
                                    string strType = DomUtil.GetAttr(nodes[i], "type");
                                    if (i != 0)
                                        strValue += ",";
                                    strValue += strType;
                                }
                            }
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }

                    // 2009/10/23 
                    goto END1;
                }

                if (strCategory == "amerce")
                {
                    switch (strName)
                    {
                        case "dbname":
                            strValue = app.AmerceDbName;
                            break;
                        case "overduestyle":
                            strValue = app.OverdueStyle;
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }

                // 2015/6/13
                if (strCategory == "arrived")
                {
                    switch (strName)
                    {
                        case "dbname":
                            strValue = app.ArrivedDbName;
                            break;
                        default:
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    goto END1;
                }

                if (strCategory == "biblio")
                {
                    switch (strName)
                    {
                        case "dbnames":
                            {
                                for (int i = 0; i < app.ItemDbs.Count; i++)
                                {
                                    string strDbName = app.ItemDbs[i].BiblioDbName;

                                    // 即便数据库名为空，逗号也不能省略。主要是为了准确对位

                                    if (i != 0)
                                        strValue += ",";
                                    strValue += strDbName;
                                }
                            }
                            break;
                        case "syntaxs":
                            {
                                for (int i = 0; i < app.ItemDbs.Count; i++)
                                {
                                    string strSyntax = app.ItemDbs[i].BiblioDbSyntax;

                                    // 即便strSyntax为空，逗号也不能省略。主要是为了准确对位


                                    if (i != 0)
                                        strValue += ",";
                                    strValue += strSyntax;
                                }
                            }
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }

                if (strCategory == "virtual")
                {
                    switch (strName)
                    {
                        // 2011/1/21
                        case "def":
                            {
                                /*
                                // TODO: 把这个初始化放在正规的初始化中？
                                nRet = app.InitialVdbs(sessioninfo.Channels,
                                    out strError);
                                if (nRet == -1)
                                {
                                    strError = "InitialVdbs error : " + strError;
                                    goto ERROR1;
                                }
                                 * */


                                XmlNode root = app.LibraryCfgDom.DocumentElement.SelectSingleNode(
                                    "virtualDatabases");
                                if (root == null)
                                {
                                    strError = "尚未配置<virtualDatabases>元素";
                                    goto ERROR1;
                                }
                                strValue = root.OuterXml;
                            }
                            break;
                        case "dbnames":
                            {
                                /*
                                // TODO: 把这个初始化放在正规的初始化中？
                                nRet = app.InitialVdbs(sessioninfo.Channels,
                                    out strError);
                                if (nRet == -1)
                                {
                                    strError = "InitialVdbs error : " + strError;
                                    goto ERROR1;
                                }
                                 * */

                                if (app.vdbs != null)
                                {
                                    for (int i = 0; i < app.vdbs.Count; i++)
                                    {
                                        VirtualDatabase vdb = app.vdbs[i];
                                        if (vdb.IsVirtual == false)
                                            continue;

                                        if (String.IsNullOrEmpty(strValue) == false)
                                            strValue += ",";
                                        strValue += vdb.GetName("zh");
                                    }
                                }
                            }
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }


                if (strCategory == "item")
                {
                    switch (strName)
                    {
                        case "dbnames":
                            {
                                for (int i = 0; i < app.ItemDbs.Count; i++)
                                {
                                    string strDbName = app.ItemDbs[i].DbName;

                                    // 即便strDbName为空，逗号也不能省略。主要是为了准确对位

                                    if (i != 0)
                                        strValue += ",";
                                    strValue += strDbName;
                                }
                            }
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }

                // 2007/10/19 
                if (strCategory == "issue")
                {
                    switch (strName)
                    {
                        case "dbnames":
                            {
                                for (int i = 0; i < app.ItemDbs.Count; i++)
                                {
                                    string strDbName = app.ItemDbs[i].IssueDbName;

                                    // 即便strDbName为空，逗号也不能省略。主要是为了准确对位

                                    if (i != 0)
                                        strValue += ",";
                                    strValue += strDbName;
                                }
                            }
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }

                // 2007/11/30 
                if (strCategory == "order")
                {
                    switch (strName)
                    {
                        case "dbnames":
                            {
                                for (int i = 0; i < app.ItemDbs.Count; i++)
                                {
                                    string strDbName = app.ItemDbs[i].OrderDbName;

                                    // 即便strDbName为空，逗号也不能省略。主要是为了准确对位

                                    if (i != 0)
                                        strValue += ",";
                                    strValue += strDbName;
                                }
                            }
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }

                if (strCategory == "reader")
                {
                    switch (strName)
                    {
                        case "dbnames":
                            {
#if NO
                                for (int i = 0; i < app.ReaderDbs.Count; i++)
                                {
                                    string strDbName = app.ReaderDbs[i].DbName;
                                    if (String.IsNullOrEmpty(strDbName) == true)
                                        continue;

                                    // 2012/9/7
                                    if (string.IsNullOrEmpty(sessioninfo.LibraryCode) == false)
                                    {
                                        string strLibraryCode = app.ReaderDbs[i].LibraryCode;
                                        // 匹配图书馆代码
                                        // parameters:
                                        //      strSingle   单个图书馆代码。空的总是不能匹配
                                        //      strList     图书馆代码列表，例如"第一个,第二个"，或者"*"。空表示都匹配
                                        // return:
                                        //      false   没有匹配上
                                        //      true    匹配上
                                        if (LibraryApplication.MatchLibraryCode(strLibraryCode, sessioninfo.LibraryCode) == false)
                                            continue;
                                    }

                                    if (String.IsNullOrEmpty(strValue) == false)
                                        strValue += ",";
                                    strValue += strDbName;
                                }
#endif
                                List<string> dbnames = app.GetCurrentReaderDbNameList(sessioninfo.LibraryCodeList);
                                strValue = StringUtil.MakePathList(dbnames);
                            }
                            break;
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }

                if (strCategory == "library")
                {
                    switch (strName)
                    {
                        case "name":
                            {
                                XmlNode node = app.LibraryCfgDom.SelectSingleNode("//libraryName");
                                if (node == null)
                                    strValue = "";
                                else
                                    strValue = node.InnerText;
                            }
                            break;
                        /*
                    case "serverDirectory":
                        {
                            XmlNode node = app.LibraryCfgDom.SelectSingleNode("//libraryserver");
                            if (node == null)
                                strValue = "";
                            else
                                strValue = DomUtil.GetAttr(node, "url");
                        }
                        break;
                         * */
                        default:
                            /*
                            nRet = 0;
                            break;
                             * */
                            strError = "category '" + strCategory + "' 中未知的 name '" + strName + "'";
                            goto NOTFOUND;
                    }
                    // 2009/10/23 
                    goto END1;
                }

            NOTFOUND:
                result.Value = 0;
                result.ErrorCode = ErrorCode.NotFound;  // 表示配置节点没有找到
                if (String.IsNullOrEmpty(strError) == true)
                    result.ErrorInfo = "未知的 category '" + strCategory + "' 和 name '" + strName + "'";
                else
                    result.ErrorInfo = strError;
                return result;

            END1:
                result.Value = nRet;
                return result;
            ERROR1:
                result.Value = -1;
                result.ErrorCode = ErrorCode.SystemError;
                result.ErrorInfo = strError;
                return result;
            }
            catch (Exception ex)
            {
                string strErrorText = "dp2Library GetSystemParameter() API出现异常: " + ExceptionUtil.GetDebugText(ex);
                app.WriteErrorLog(strErrorText);

                result.Value = -1;
                result.ErrorCode = ErrorCode.SystemError;
                result.ErrorInfo = strErrorText;
                return result;
            }
            finally
            {
                app.UnlockForRead();
            }
        }


		~~~

		#if NO
        // 2013/2/26
        // 检查确保 kdbs != null
        string EnsureKdbs(bool bThrowException = true)
        {
            if (app.kdbs == null)
            {
                app.ActivateManagerThreadForLoad();
                string strError = "app.kdbs == null。故障原因请检查dp2Library日志，或稍后重试操作";
                if (bThrowException == true)
                    throw new Exception(strError);

                return strError;
            }

            return null;    // 没有出错
        }
#endif


        // 检索书目记录下属的实体记录，返回少量必要的信息，可以提供后面实做删除时使用
        // parameters:
        //      strStyle    check_borrow_info,count_borrow_info,return_record_xml
        //                  当包含 check_borrow_info 时，发现第一个流通信息，本函数就立即返回-1
        //                  当包含 count_borrow_info 时，函数要统计全部流通信息的个数
        // return:
        //      -2  not exist entity dbname
        //      -1  error
        //      >=0 含有流通信息的实体记录个数, 当strStyle包含count_borrow_info时。
        public int SearchChildEntities(RmsChannel channel,
            string strBiblioRecPath,
            string strStyle,
            Delegate_checkRecord procCheckRecord,
            object param,
            out long lHitCount,
            out List<DeleteEntityInfo> entityinfos,
            out string strError)
        {
            strError = "";
            lHitCount = 0;
            entityinfos = new List<DeleteEntityInfo>();

            int nRet = 0;

            bool bCheckBorrowInfo = StringUtil.IsInList("check_borrow_info", strStyle);
            bool bCountBorrowInfo = StringUtil.IsInList("count_borrow_info", strStyle);
            bool bReturnRecordXml = StringUtil.IsInList("return_record_xml", strStyle);
            bool bOnlyGetCount = StringUtil.IsInList("only_getcount", strStyle);

            if (bCheckBorrowInfo == true
                && bCountBorrowInfo == true)
            {
                strError = "strStyle中check_borrow_info和count_borrow_info不能同时具备";
                return -1;
            }

            string strBiblioDbName = ResPath.GetDbName(strBiblioRecPath);
            string strBiblioRecId = ResPath.GetRecordId(strBiblioRecPath);

            // 获得书目库对应的实体库名
            string strItemDbName = "";
            nRet = this.GetItemDbName(strBiblioDbName,
                 out strItemDbName,
                 out strError);
            if (nRet == -1)
                goto ERROR1;

            // 2008/12/5 
            if (String.IsNullOrEmpty(strItemDbName) == true)
                return 0;

            // 检索实体库中全部从属于特定id的记录

            string strQueryXml = "<target list='"
                + StringUtil.GetXmlStringSimple(strItemDbName + ":" + "父记录")       // 2007/9/14 
                + "'><item><word>"
                + strBiblioRecId
                + "</word><match>exact</match><relation>=</relation><dataType>string</dataType><maxCount>-1</maxCount></item><lang>" + "zh" + "</lang></target>";

            long lRet = channel.DoSearch(strQueryXml,
                "entities",
                "", // strOuputStyle
                out strError);
            if (lRet == -1)
                goto ERROR1;

            if (lRet == 0)
            {
                strError = "没有找到属于书目记录 '" + strBiblioRecPath + "' 的任何实体记录";
                return 0;
            }

            lHitCount = lRet;

            // 仅返回命中条数
            if (bOnlyGetCount == true)
                return 0;

            int nResultCount = (int)lRet;

            if (nResultCount > 10000)
            {
                strError = "命中册记录数 " + nResultCount.ToString() + " 超过 10000, 暂时不支持针对它们的删除操作";
                goto ERROR1;
            }

            string strColumnStyle = "id,xml,timestamp";

            int nBorrowInfoCount = 0;

            int nStart = 0;
            int nPerCount = 100;
            for (; ; )
            {
                List<string> aPath = null;
                lRet = channel.DoGetSearchResult(
                    "entities",
                    nStart,
                    nPerCount,
                    "zh",
                    null,
                    out aPath,
                    out strError);
                if (lRet == -1)
                    goto ERROR1;

                if (aPath.Count == 0)
                {
                    strError = "aPath.Count == 0";
                    goto ERROR1;
                }

                // 获得每条记录
                for (int i = 0; i < aPath.Count; i++)
                {
                    string strMetaData = "";
                    string strXml = "";
                    byte[] timestamp = null;
                    string strOutputPath = "";

                    lRet = channel.GetRes(aPath[i],
                        out strXml,
                        out strMetaData,
                        out timestamp,
                        out strOutputPath,
                        out strError);
                    DeleteEntityInfo entityinfo = new DeleteEntityInfo();

                    if (lRet == -1)
                    {
                        /*
                        entityinfo.RecPath = aPath[i];
                        entityinfo.ErrorCode = channel.OriginErrorCode;
                        entityinfo.ErrorInfo = channel.ErrorInfo;

                        entityinfo.OldRecord = "";
                        entityinfo.OldTimestamp = null;
                        entityinfo.NewRecord = "";
                        entityinfo.NewTimestamp = null;
                        entityinfo.Action = "";
                         * */
                        if (channel.ErrorCode == ChannelErrorCode.NotFound)
                            continue;

                        strError = "获取实体记录 '" + aPath[i] + "' 时发生错误: " + strError;
                        goto ERROR1;
                        // goto CONTINUE;
                    }

                    entityinfo.RecPath = strOutputPath;
                    entityinfo.OldTimestamp = timestamp;
                    if (bReturnRecordXml == true)
                        entityinfo.OldRecord = strXml;

                    if (bCheckBorrowInfo == true
                        || bCountBorrowInfo == true
                        || procCheckRecord != null)
                    {
                        // 检查是否有借阅信息
                        // 把记录装入DOM
                        XmlDocument domExist = new XmlDocument();

                        try
                        {
                            domExist.LoadXml(strXml);
                        }
                        catch (Exception ex)
                        {
                            strError = "实体记录 '" + aPath[i] + "' 装载进入DOM时发生错误: " + ex.Message;
                            goto ERROR1;
                        }

                        if (procCheckRecord != null)
                        {
                            nRet = procCheckRecord(
                                nStart + i,
                                strOutputPath,
                                domExist,
                                timestamp,
                                param,
                                out strError);
                            if (nRet != 0)
                                return nRet;
                        }

                        entityinfo.ItemBarcode = DomUtil.GetElementText(domExist.DocumentElement,
                            "barcode");

                        // TODO: 在日志恢复阶段调用本函数时，是否还有必要检查是否具有流通信息？似乎这时应强制删除为好

                        // 观察已经存在的记录是否有流通信息
                        string strDetail = "";
                        bool bHasCirculationInfo = IsEntityHasCirculationInfo(domExist, out strDetail);

                        if (bHasCirculationInfo == true)
                        {
                            if (bCheckBorrowInfo == true)
                            {
                                strError = "拟删除的册记录 '" + entityinfo.RecPath + "' 中包含有流通信息(" + strDetail + ")(此种情况可能不限于这一条)，不能删除。因此全部删除操作均被放弃。";
                                goto ERROR1;
                            }
                            if (bCountBorrowInfo == true)
                                nBorrowInfoCount++;
                        }
                    }

                    // CONTINUE:
                    entityinfos.Add(entityinfo);
                }

                nStart += aPath.Count;
                if (nStart >= nResultCount)
                    break;
            }

            return nBorrowInfoCount;
        ERROR1:
            return -1;
        }


		        // TODO: 是否检查流通信息，需要可以通过参数控制
        // 检索书目记录下属的事项记录，返回少量必要的信息，可以提供后面实做删除时使用
        // parameters:
        //      strStyle    return_record_xml 要在DeleteEntityInfo结构中返回OldRecord内容
        //                  check_circulation_info 检查是否具有流通信息。如果具有则会报错 2012/12/19 把缺省行为变为此参数
        // return:
        //      -1  error
        //      0   not exist item dbname
        //      1   exist item dbname
        public int SearchChildItems(RmsChannel channel,
            string strBiblioRecPath,
            string strStyle,
            DigitalPlatform.LibraryServer.LibraryApplication.Delegate_checkRecord procCheckRecord,
            object param,
            out long lHitCount,
            out List<DeleteEntityInfo> entityinfos,
            out string strError)
        {
            strError = "";
            lHitCount = 0;
            entityinfos = new List<DeleteEntityInfo>();

            int nRet = 0;

            bool bReturnRecordXml = StringUtil.IsInList("return_record_xml", strStyle);
            bool bCheckCirculationInfo = StringUtil.IsInList("check_circulation_info", strStyle);
            bool bOnlyGetCount = StringUtil.IsInList("only_getcount", strStyle);

            string strBiblioDbName = ResPath.GetDbName(strBiblioRecPath);
            string strBiblioRecId = ResPath.GetRecordId(strBiblioRecPath);

            // 获得书目库对应的事项库名
            string strItemDbName = "";
            nRet = this.GetItemDbName(strBiblioDbName,
                 out strItemDbName,
                 out strError);
            if (nRet == -1)
                goto ERROR1;

            if (String.IsNullOrEmpty(strItemDbName) == true)
                return 0;

            // 检索实体库中全部从属于特定id的记录

            string strQueryXml = "<target list='"
                + StringUtil.GetXmlStringSimple(strItemDbName + ":" + "父记录")
                + "'><item><word>"
                + strBiblioRecId
                + "</word><match>exact</match><relation>=</relation><dataType>string</dataType><maxCount>-1</maxCount></item><lang>" + "zh" + "</lang></target>";

            long lRet = channel.DoSearch(strQueryXml,
                "entities",
                "", // strOuputStyle
                out strError);
            if (lRet == -1)
                goto ERROR1;

            if (lRet == 0)
            {
                strError = "没有找到属于书目记录 '" + strBiblioRecPath + "' 的任何" + this.ItemName + "记录";
                return 0;
            }

            lHitCount = lRet;

            // 仅返回命中条数
            if (bOnlyGetCount == true)
                return 0;

            int nResultCount = (int)lRet;
            int nMaxCount = 10000;
            if (nResultCount > nMaxCount)
            {
                strError = "命中" + this.ItemName + "记录数 " + nResultCount.ToString() + " 超过 " + nMaxCount.ToString() + ", 暂时不支持针对它们的删除操作";
                goto ERROR1;
            }

            int nStart = 0;
            int nPerCount = 100;
            for (; ; )
            {
                List<string> aPath = null;
                lRet = channel.DoGetSearchResult(
                    "entities",
                    nStart,
                    nPerCount,
                    "zh",
                    null,
                    out aPath,
                    out strError);
                if (lRet == -1)
                    goto ERROR1;

                if (aPath.Count == 0)
                {
                    strError = "aPath.Count == 0";
                    goto ERROR1;
                }

                // 获得每条记录
                for (int i = 0; i < aPath.Count; i++)
                {
                    string strMetaData = "";
                    string strXml = "";
                    byte[] timestamp = null;
                    string strOutputPath = "";

                    // TODO: 这里需要改造为直接从结果集中获取 xml,timestamp
                    lRet = channel.GetRes(aPath[i],
                        out strXml,
                        out strMetaData,
                        out timestamp,
                        out strOutputPath,
                        out strError);
                    DeleteEntityInfo entityinfo = new DeleteEntityInfo();

                    if (lRet == -1)
                    {
                        /*
                        entityinfo.RecPath = aPath[i];
                        entityinfo.ErrorCode = channel.OriginErrorCode;
                        entityinfo.ErrorInfo = channel.ErrorInfo;

                        entityinfo.OldRecord = "";
                        entityinfo.OldTimestamp = null;
                        entityinfo.NewRecord = "";
                        entityinfo.NewTimestamp = null;
                        entityinfo.Action = "";
                         * */
                        if (channel.ErrorCode == ChannelErrorCode.NotFound)
                            continue;

                        strError = "获取" + this.ItemName + "记录 '" + aPath[i] + "' 时发生错误: " + strError;
                        goto ERROR1;
                        // goto CONTINUE;
                    }

                    entityinfo.RecPath = strOutputPath;
                    entityinfo.OldTimestamp = timestamp;
                    if (bReturnRecordXml == true)
                        entityinfo.OldRecord = strXml;

                    if (bCheckCirculationInfo == true
                        || procCheckRecord != null)
                    {
                        // 检查是否有借阅信息
                        // 把记录装入DOM
                        XmlDocument domExist = new XmlDocument();

                        try
                        {
                            domExist.LoadXml(strXml);
                        }
                        catch (Exception ex)
                        {
                            strError = this.ItemName + "记录 '" + aPath[i] + "' 装载进入DOM时发生错误: " + ex.Message;
                            goto ERROR1;
                        }

                        // 2016/11/15
                        if (procCheckRecord != null)
                        {
                            nRet = procCheckRecord(
                                nStart + i,
                                strOutputPath,
                                domExist,
                                timestamp,
                                param,
                                out strError);
                            if (nRet != 0)
                                return nRet;
                        }

                        /*
                        entityinfo.ItemBarcode = DomUtil.GetElementText(domExist.DocumentElement,
                            "barcode");
                         * */

                        // TODO: 在日志恢复阶段调用本函数时，是否还有必要检查是否具有流通信息？似乎这时应强制删除为好

                        // 观察已经存在的记录是否有流通信息
                        // return:
                        //      -1  出错
                        //      0   没有
                        //      1   有。报错信息在strError中
                        nRet = this.HasCirculationInfo(domExist, out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        if (nRet == 1)
                        {
                            strError = "拟删除的" + this.ItemName + "记录 '" + entityinfo.RecPath + "' 中" + strError + "(此种情况可能不限于这一条)，不能删除。因此全部删除操作均被放弃。";
                            goto ERROR1;
                        }
                    }

                    // CONTINUE:
                    entityinfos.Add(entityinfo);
                }

                nStart += aPath.Count;
                if (nStart >= nResultCount)
                    break;
            }

            return 1;
        ERROR1:
            return -1;
        }


		        // 创建数据库
        // parameters:
        //      strLibraryCodeList  当前用户的管辖分馆代码列表
        //      bRecreate   是否为重新创建？如果为重新创建，则允许已经存在定义；如果不是重新创建，即首次创建，则不允许已经存在定义
        //                  注: 重新创建的意思, 是 library.xml 中有定义，但 dp2kernel 中没有对应的数据库，要根据定义重新创建这些 dp2kernel 数据库
        // return:
        //      -1  出错
        //      0   没有找到
        //      1   成功
        int CreateDatabase(
            SessionInfo sessioninfo,
            RmsChannelCollection Channels,
            string strLibraryCodeList,
            string strDatabaseInfo,
            bool bRecreate,
            out string strOutputInfo,
            out string strError)
        {
            strOutputInfo = "";
            strError = "";

            int nRet = 0;

            string strLogFileName = this.GetTempFileName("zip");
            List<XmlNode> database_nodes = new List<XmlNode>(); // 已经创建的数据库的定义节点

            List<string> created_dbnames = new List<string>();  // 过程中，已经创建的数据库名

            bool bDbChanged = false;    // 数据库名是否发生过改变？或者新创建过数据库? 如果发生过，需要重新初始化kdbs

            XmlDocument request_dom = new XmlDocument();
            try
            {
                request_dom.LoadXml(strDatabaseInfo);
            }
            catch (Exception ex)
            {
                strError = "strDatabaseInfo内容装入XMLDOM时出错: " + ex.Message;
                return -1;
            }

            RmsChannel channel = Channels.GetChannel(this.WsUrl);

            XmlNodeList nodes = request_dom.DocumentElement.SelectNodes("database");
            // for (int i = 0; i < nodes.Count; i++)
            foreach (XmlElement request_node in nodes)
            {
                // XmlNode node = nodes[i];
                string strType = DomUtil.GetAttr(request_node, "type").ToLower();

                string strName = DomUtil.GetAttr(request_node, "name");

                // 创建书目数据库
                if (strType == "biblio")
                {
                    if (SessionInfo.IsGlobalUser(strLibraryCodeList) == false)
                    {
                        strError = "当前用户不是全局用户，不允许创建或重新创建书目库";
                        return -1;
                    }

                    if (this.TestMode == true)
                    {
                        XmlNodeList existing_nodes = this.LibraryCfgDom.DocumentElement.SelectNodes("itemdbgroup/database");
                        if (existing_nodes.Count >= 4)
                        {
                            strError = "dp2Library XE 评估模式下只能创建最多 4 个书目库";
                            goto ERROR1;
                        }
                    }

                    // 2009/11/13
                    XmlNode exist_database_node = this.LibraryCfgDom.DocumentElement.SelectSingleNode("itemdbgroup/database[@biblioDbName='" + strName + "']");
                    if (bRecreate == true && exist_database_node == null)
                    {
                        strError = "library.xml 中并不存在书目库 '" + strName + "' 的定义，无法进行重新创建";
                        return 0;
                    }

                    string strSyntax = DomUtil.GetAttr(request_node, "syntax");
                    if (String.IsNullOrEmpty(strSyntax) == true)
                        strSyntax = "unimarc";

                    // usage: book series
                    string strUsage = DomUtil.GetAttr(request_node, "usage");
                    if (String.IsNullOrEmpty(strUsage) == true)
                        strUsage = "book";

                    // 2009/10/23
                    string strRole = DomUtil.GetAttr(request_node, "role");

                    if (bRecreate == false)
                    {
                        // 检查 cfgdom 中是否已经存在同名的书目库
                        if (this.IsBiblioDbName(strName) == true)
                        {
                            strError = "书目库 '" + strName + "' 的定义已经存在，不能重复创建";
                            goto ERROR1;
                        }
                    }

                    // 检查dp2kernel中是否有和书目库同名的数据库存在
                    {
                        // 数据库是否已经存在？
                        // return:
                        //      -1  error
                        //      0   not exist
                        //      1   exist
                        //      2   其他类型的同名对象已经存在
                        nRet = IsDatabaseExist(
                            channel,
                            strName,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        if (nRet >= 1)
                            goto ERROR1;
                    }

                    string strEntityDbName = DomUtil.GetAttr(request_node, "entityDbName");

                    string strOrderDbName = DomUtil.GetAttr(request_node, "orderDbName");

                    string strIssueDbName = DomUtil.GetAttr(request_node, "issueDbName");

                    string strCommentDbName = DomUtil.GetAttr(request_node, "commentDbName");

                    if (strEntityDbName == "<default>")
                        strEntityDbName = strName + "实体";

                    if (strOrderDbName == "<default>")
                        strOrderDbName = strName + "订购";

                    if (strIssueDbName == "<default>")
                        strIssueDbName = strName + "期";

                    if (strCommentDbName == "<default>")
                        strCommentDbName = strName + "评注";

                    string strInCirculation = DomUtil.GetAttr(request_node, "inCirculation");
                    if (String.IsNullOrEmpty(strInCirculation) == true)
                        strInCirculation = "true";  // 缺省为true

                    string strUnionCatalogStyle = DomUtil.GetAttr(request_node, "unionCatalogStyle");

                    string strReplication = DomUtil.GetAttr(request_node, "replication");

                    if (String.IsNullOrEmpty(strEntityDbName) == false)
                    {
                        if (bRecreate == false)
                        {
                            // 检查 cfgdom 中是否已经存在同名的实体库
                            if (this.IsItemDbName(strEntityDbName) == true)
                            {
                                strError = "实体库 '" + strEntityDbName + "' 的定义已经存在，不能重复创建";
                                goto ERROR1;
                            }
                        }

                        // 数据库是否已经存在？
                        // return:
                        //      -1  error
                        //      0   not exist
                        //      1   exist
                        //      2   其他类型的同名对象已经存在
                        nRet = IsDatabaseExist(
                            channel,
                            strEntityDbName,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        if (nRet >= 1)
                            goto ERROR1;
                    }

                    if (String.IsNullOrEmpty(strOrderDbName) == false)
                    {
                        if (bRecreate == false)
                        {
                            // 检查cfgdom中是否已经存在同名的订购库
                            if (this.IsOrderDbName(strOrderDbName) == true)
                            {
                                strError = "订购库 '" + strOrderDbName + "' 的定义已经存在，不能重复创建";
                                goto ERROR1;
                            }
                        }

                        // 数据库是否已经存在？
                        // return:
                        //      -1  error
                        //      0   not exist
                        //      1   exist
                        //      2   其他类型的同名对象已经存在
                        nRet = IsDatabaseExist(
                            channel,
                            strOrderDbName,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        if (nRet >= 1)
                            goto ERROR1;
                    }


                    if (String.IsNullOrEmpty(strIssueDbName) == false)
                    {
                        if (bRecreate == false)
                        {
                            // 检查cfgdom中是否已经存在同名的期库
                            if (this.IsOrderDbName(strIssueDbName) == true)
                            {
                                strError = "期库 '" + strIssueDbName + "' 的定义已经存在，不能重复创建";
                                goto ERROR1;
                            }
                        }

                        // 数据库是否已经存在？
                        // return:
                        //      -1  error
                        //      0   not exist
                        //      1   exist
                        //      2   其他类型的同名对象已经存在
                        nRet = IsDatabaseExist(
                            channel,
                            strIssueDbName,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        if (nRet >= 1)
                            goto ERROR1;
                    }

                    if (String.IsNullOrEmpty(strCommentDbName) == false)
                    {
                        if (bRecreate == false)
                        {
                            // 检查cfgdom中是否已经存在同名的评注库
                            if (this.IsCommentDbName(strCommentDbName) == true)
                            {
                                strError = "评注库 '" + strCommentDbName + "' 的定义已经存在，不能重复创建";
                                goto ERROR1;
                            }
                        }

                        // 数据库是否已经存在？
                        // return:
                        //      -1  error
                        //      0   not exist
                        //      1   exist
                        //      2   其他类型的同名对象已经存在
                        nRet = IsDatabaseExist(
                            channel,
                            strCommentDbName,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        if (nRet >= 1)
                            goto ERROR1;
                    }

                    // 开始创建

                    // 创建书目库
                    string strTemplateDir = this.DataDir + "\\templates\\" + "biblio_" + strSyntax + "_" + strUsage;

                    // 根据预先的定义，创建一个数据库
                    nRet = CreateDatabase(channel,
                        strTemplateDir,
                        strName,
                        strLogFileName,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;

                    created_dbnames.Add(strName);

                    bDbChanged = true;

                    // 创建实体库
                    if (String.IsNullOrEmpty(strEntityDbName) == false)
                    {
                        strTemplateDir = this.DataDir + "\\templates\\" + "item";

                        // 根据预先的定义，创建一个数据库
                        nRet = CreateDatabase(channel,
                            strTemplateDir,
                            strEntityDbName,
                        strLogFileName,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;

                        created_dbnames.Add(strEntityDbName);

                        bDbChanged = true;
                    }

                    // 创建订购库
                    if (String.IsNullOrEmpty(strOrderDbName) == false)
                    {
                        strTemplateDir = this.DataDir + "\\templates\\" + "order";

                        // 根据预先的定义，创建一个数据库
                        nRet = CreateDatabase(channel,
                            strTemplateDir,
                            strOrderDbName,
                        strLogFileName,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        created_dbnames.Add(strOrderDbName);

                        bDbChanged = true;
                    }

                    // 创建期库
                    if (String.IsNullOrEmpty(strIssueDbName) == false)
                    {
                        strTemplateDir = this.DataDir + "\\templates\\" + "issue";

                        // 根据预先的定义，创建一个数据库
                        nRet = CreateDatabase(channel,
                            strTemplateDir,
                            strIssueDbName,
                         strLogFileName,
                           out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        created_dbnames.Add(strIssueDbName);

                        bDbChanged = true;
                    }

                    // 创建评注库
                    if (String.IsNullOrEmpty(strCommentDbName) == false)
                    {
                        strTemplateDir = this.DataDir + "\\templates\\" + "comment";

                        // 根据预先的定义，创建一个数据库
                        nRet = CreateDatabase(channel,
                            strTemplateDir,
                            strCommentDbName,
                        strLogFileName,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        created_dbnames.Add(strCommentDbName);

                        bDbChanged = true;
                    }

                    // 在CfgDom中增加相关的配置信息
                    XmlNode root = this.LibraryCfgDom.DocumentElement.SelectSingleNode("itemdbgroup");
                    if (root == null)
                    {
                        root = this.LibraryCfgDom.CreateElement("itemdbgroup");
                        this.LibraryCfgDom.DocumentElement.AppendChild(root);
                    }

                    XmlNode nodeNewDatabase = null;

                    if (bRecreate == false)
                    {
                        nodeNewDatabase = this.LibraryCfgDom.CreateElement("database");
                        root.AppendChild(nodeNewDatabase);
                    }
                    else
                    {
                        nodeNewDatabase = exist_database_node;
                    }

                    DomUtil.SetAttr(nodeNewDatabase, "name", strEntityDbName);
                    DomUtil.SetAttr(nodeNewDatabase, "biblioDbName", strName);
                    if (String.IsNullOrEmpty(strOrderDbName) == false)
                    {
                        DomUtil.SetAttr(nodeNewDatabase, "orderDbName", strOrderDbName);
                    }
                    if (String.IsNullOrEmpty(strIssueDbName) == false)
                    {
                        DomUtil.SetAttr(nodeNewDatabase, "issueDbName", strIssueDbName);
                    }
                    if (String.IsNullOrEmpty(strCommentDbName) == false)
                    {
                        DomUtil.SetAttr(nodeNewDatabase, "commentDbName", strCommentDbName);
                    }
                    DomUtil.SetAttr(nodeNewDatabase, "syntax", strSyntax);

                    // 2009/10/23
                    DomUtil.SetAttr(nodeNewDatabase, "role", strRole);

                    DomUtil.SetAttr(nodeNewDatabase, "inCirculation", strInCirculation);

                    // 2012/4/30
                    if (string.IsNullOrEmpty(strUnionCatalogStyle) == false)
                        DomUtil.SetAttr(nodeNewDatabase, "unionCatalogStyle", strUnionCatalogStyle);

                    if (string.IsNullOrEmpty(strReplication) == false)
                        DomUtil.SetAttr(nodeNewDatabase, "replication", strReplication);

                    // <itemdbgroup>内容更新，刷新配套的内存结构
                    nRet = this.LoadItemDbGroupParam(this.LibraryCfgDom,
                        out strError);
                    if (nRet == -1)
                    {
                        this.WriteErrorLog(strError);
                        goto ERROR1;
                    }

                    this.Changed = true;
                    this.ActivateManagerThread();

                    created_dbnames.Clear();

                    database_nodes.Add(request_node);
                    continue;
                } // end of type biblio
                else if (strType == "entity")
                {
                    if (SessionInfo.IsGlobalUser(strLibraryCodeList) == false)
                    {
                        strError = "当前用户不是全局用户，不允许创建或重新创建实体库";
                        return -1;
                    }
                    // TODO: 增加recreate能力

                    // 单独创建实体库
                    string strBiblioDbName = DomUtil.GetAttr(request_node, "biblioDbName");
                    if (String.IsNullOrEmpty(strBiblioDbName) == true)
                    {
                        strError = "请求创建实体库的<database>元素中，应包含biblioDbName属性";
                        goto ERROR1;
                    }

                    // 获得相关配置小节
                    XmlNode nodeDatabase = this.LibraryCfgDom.DocumentElement.SelectSingleNode("itemdbgroup/database[@biblioDbName='" + strBiblioDbName + "']");
                    if (nodeDatabase == null)
                    {
                        strError = "配置DOM中名字为 '" + strBiblioDbName + "' 的书目库(biblioDbName属性)相关<database>元素没有找到，无法在其下创建实体库 " + strName;
                        return 0;
                    }

                    string strOldEntityDbName = DomUtil.GetAttr(nodeDatabase,
                        "name");
                    if (strOldEntityDbName == strName)
                    {
                        strError = "从属于书目库 '" + strBiblioDbName + "' 的实体库 '" + strName + "' 定义已经存在，不能重复创建";
                        goto ERROR1;
                    }

                    if (String.IsNullOrEmpty(strOldEntityDbName) == false)
                    {
                        strError = "要创建从属于书目库 '" + strBiblioDbName + "' 的新实体库 '" + strName + "'，必须先删除已经存在的实体库 '"
                            + strOldEntityDbName + "'";
                        goto ERROR1;
                    }

                    string strTemplateDir = this.DataDir + "\\templates\\" + "item";

                    // 根据预先的定义，创建一个数据库
                    nRet = CreateDatabase(channel,
                        strTemplateDir,
                        strName,
                        strLogFileName,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;

                    created_dbnames.Add(strName);

                    bDbChanged = true;

                    DomUtil.SetAttr(nodeDatabase, "name", strName);

                    // 2008/12/4
                    // <itemdbgroup>内容更新，刷新配套的内存结构
                    nRet = this.LoadItemDbGroupParam(this.LibraryCfgDom,
                        out strError);
                    if (nRet == -1)
                    {
                        this.WriteErrorLog(strError);
                        goto ERROR1;
                    }

                    this.Changed = true;
                    database_nodes.Add(request_node);
                }
                else if (strType == "order")
                {
                    if (SessionInfo.IsGlobalUser(strLibraryCodeList) == false)
                    {
                        strError = "当前用户不是全局用户，不允许创建或重新创建订购库";
                        return -1;
                    }
                    // TODO: 增加recreate能力

                    // 单独创建订购库
                    string strBiblioDbName = DomUtil.GetAttr(request_node, "biblioDbName");
                    if (String.IsNullOrEmpty(strBiblioDbName) == true)
                    {
                        strError = "创建订购库的<database>元素中，应包含biblioDbName属性";
                        goto ERROR1;
                    }

                    // 获得相关配置小节
                    XmlNode nodeDatabase = this.LibraryCfgDom.DocumentElement.SelectSingleNode("itemdbgroup/database[@biblioDbName='" + strBiblioDbName + "']");
                    if (nodeDatabase == null)
                    {
                        strError = "配置DOM中名字为 '" + strBiblioDbName + "' 的书目库(biblioDbName属性)相关<database>元素没有找到，无法在其下创建订购库 " + strName;
                        return 0;
                    }

                    string strOldOrderDbName = DomUtil.GetAttr(nodeDatabase,
                        "orderDbName");
                    if (strOldOrderDbName == strName)
                    {
                        strError = "从属于书目库 '" + strBiblioDbName + "' 的订购库 '" + strName + "' 定义已经存在，不能重复创建";
                        goto ERROR1;
                    }

                    if (String.IsNullOrEmpty(strOldOrderDbName) == false)
                    {
                        strError = "要创建从属于书目库 '" + strBiblioDbName + "' 的新订购库 '" + strName + "'，必须先删除已经存在的订购库 '"
                            + strOldOrderDbName + "'";
                        goto ERROR1;
                    }

                    string strTemplateDir = this.DataDir + "\\templates\\" + "order";

                    // 根据预先的定义，创建一个数据库
                    nRet = CreateDatabase(channel,
                        strTemplateDir,
                        strName,
                        strLogFileName,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                    created_dbnames.Add(strName);

                    bDbChanged = true;

                    DomUtil.SetAttr(nodeDatabase, "orderDbName", strName);

                    // 2008/12/4
                    // <itemdbgroup>内容更新，刷新配套的内存结构
                    nRet = this.LoadItemDbGroupParam(this.LibraryCfgDom,
                        out strError);
                    if (nRet == -1)
                    {
                        this.WriteErrorLog(strError);
                        goto ERROR1;
                    }

                    this.Changed = true;
                    database_nodes.Add(request_node);
                }
                else if (strType == "issue")
                {
                    if (SessionInfo.IsGlobalUser(strLibraryCodeList) == false)
                    {
                        strError = "当前用户不是全局用户，不允许创建或重新创建期库";
                        goto ERROR1;
                    }
                    // TODO: 增加recreate能力

                    // 单独创建期库
                    string strBiblioDbName = DomUtil.GetAttr(request_node, "biblioDbName");
                    if (String.IsNullOrEmpty(strBiblioDbName) == true)
                    {
                        strError = "创建期库的<database>元素中，应包含biblioDbName属性";
                        goto ERROR1;
                    }

                    // 获得相关配置小节
                    XmlNode nodeDatabase = this.LibraryCfgDom.DocumentElement.SelectSingleNode("itemdbgroup/database[@biblioDbName='" + strBiblioDbName + "']");
                    if (nodeDatabase == null)
                    {
                        strError = "配置DOM中名字为 '" + strBiblioDbName + "' 的书目库(biblioDbName属性)相关<database>元素没有找到，无法在其下创建期库 " + strName;
                        return 0;
                    }

                    string strOldIssueDbName = DomUtil.GetAttr(nodeDatabase,
                        "issueDbName");
                    if (strOldIssueDbName == strName)
                    {
                        strError = "从属于书目库 '" + strBiblioDbName + "' 的期库 '" + strName + "' 定义已经存在，不能重复创建";
                        goto ERROR1;
                    }

                    if (String.IsNullOrEmpty(strOldIssueDbName) == false)
                    {
                        strError = "要创建从属于书目库 '" + strBiblioDbName + "' 的新期库 '" + strName + "'，必须先删除已经存在的期库 '"
                            + strOldIssueDbName + "'";
                        goto ERROR1;
                    }

                    string strTemplateDir = this.DataDir + "\\templates\\" + "issue";

                    // 根据预先的定义，创建一个数据库
                    nRet = CreateDatabase(channel,
                        strTemplateDir,
                        strName,
                        strLogFileName,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                    created_dbnames.Add(strName);

                    bDbChanged = true;

                    DomUtil.SetAttr(nodeDatabase, "issueDbName", strName);

                    // 2008/12/4
                    // <itemdbgroup>内容更新，刷新配套的内存结构
                    nRet = this.LoadItemDbGroupParam(this.LibraryCfgDom,
                        out strError);
                    if (nRet == -1)
                    {
                        this.WriteErrorLog(strError);
                        goto ERROR1;
                    }

                    this.Changed = true;
                    database_nodes.Add(request_node);
                }
                else if (strType == "comment")
                {
                    if (SessionInfo.IsGlobalUser(strLibraryCodeList) == false)
                    {
                        strError = "当前用户不是全局用户，不允许创建或重新创建评注库";
                        goto ERROR1;
                    }
                    // TODO: 增加recreate能力

                    // 单独创建评注库
                    string strBiblioDbName = DomUtil.GetAttr(request_node, "biblioDbName");
                    if (String.IsNullOrEmpty(strBiblioDbName) == true)
                    {
                        strError = "创建评注库的<database>元素中，应包含biblioDbName属性";
                        goto ERROR1;
                    }

                    // 获得相关配置小节
                    XmlNode nodeDatabase = this.LibraryCfgDom.DocumentElement.SelectSingleNode("itemdbgroup/database[@biblioDbName='" + strBiblioDbName + "']");
                    if (nodeDatabase == null)
                    {
                        strError = "配置DOM中名字为 '" + strBiblioDbName + "' 的书目库(biblioDbName属性)相关<database>元素没有找到，无法在其下创建评注库 " + strName;
                        return 0;
                    }

                    string strOldCommentDbName = DomUtil.GetAttr(nodeDatabase,
                        "commentDbName");
                    if (strOldCommentDbName == strName)
                    {
                        strError = "从属于书目库 '" + strBiblioDbName + "' 的评注库 '" + strName + "' 定义已经存在，不能重复创建";
                        goto ERROR1;
                    }

                    if (String.IsNullOrEmpty(strOldCommentDbName) == false)
                    {
                        strError = "要创建从属于书目库 '" + strBiblioDbName + "' 的新评注库 '" + strName + "'，必须先删除已经存在的评注库 '"
                            + strOldCommentDbName + "'";
                        goto ERROR1;
                    }

                    string strTemplateDir = this.DataDir + "\\templates\\" + "comment";

                    // 根据预先的定义，创建一个数据库
                    nRet = CreateDatabase(channel,
                        strTemplateDir,
                        strName,
                        strLogFileName,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                    created_dbnames.Add(strName);

                    bDbChanged = true;

                    DomUtil.SetAttr(nodeDatabase, "commentDbName", strName);

                    // 2008/12/4
                    // <itemdbgroup>内容更新，刷新配套的内存结构
                    nRet = this.LoadItemDbGroupParam(this.LibraryCfgDom,
                        out strError);
                    if (nRet == -1)
                    {
                        this.WriteErrorLog(strError);
                        goto ERROR1;
                    }

                    this.Changed = true;
                    database_nodes.Add(request_node);
                }
                else if (strType == "reader")
                {
                    // 创建读者库

                    // 2009/11/13
                    XmlNode exist_database_node = this.LibraryCfgDom.DocumentElement.SelectSingleNode("readerdbgroup/database[@name='" + strName + "']");
                    if (bRecreate == true && exist_database_node == null)
                    {
                        strError = "library.xml中并不存在读者库 '" + strName + "' 的定义，无法进行重新创建";
                        return 0;
                    }

                    if (bRecreate == false)
                    {
                        // 检查cfgdom中是否已经存在同名的读者库
                        if (this.IsReaderDbName(strName) == true)
                        {
                            strError = "读者库 '" + strName + "' 的定义已经存在，不能重复创建";
                            goto ERROR1;
                        }
                    }
                    else
                    {
                        if (exist_database_node != null)
                        {
                            string strExistLibraryCode = DomUtil.GetAttr(exist_database_node, "libraryCode");

                            // 2012/9/9
                            // 分馆用户只允许修改馆代码属于管辖分馆的读者库
                            if (SessionInfo.IsGlobalUser(strLibraryCodeList) == false)
                            {
                                if (string.IsNullOrEmpty(strExistLibraryCode) == true
                                    || StringUtil.IsInList(strExistLibraryCode, strLibraryCodeList) == false)
                                {
                                    strError = "重新创建读者库 '" + strName + "' 被拒绝。当前用户只能重新创建图书馆代码完全完全属于 '" + strLibraryCodeList + "' 范围的读者库";
                                    goto ERROR1;
                                }
                            }
                        }
                    }

                    string strLibraryCode = DomUtil.GetAttr(request_node,
    "libraryCode");

                    // 2012/9/9
                    // 分馆用户只允许处理馆代码为特定范围的读者库
                    if (SessionInfo.IsGlobalUser(strLibraryCodeList) == false)
                    {
                        if (string.IsNullOrEmpty(strLibraryCode) == true
                            || IsListInList(strLibraryCode, strLibraryCodeList) == false)
                        {
                            strError = "当前用户只能创建馆代码完全属于 '" + strLibraryCodeList + "' 范围内的读者库";
                            return -1;
                        }
                    }

                    // 检查dp2kernel中是否有和读者库同名的数据库存在
                    {
                        // 数据库是否已经存在？
                        // return:
                        //      -1  error
                        //      0   not exist
                        //      1   exist
                        //      2   其他类型的同名对象已经存在
                        nRet = IsDatabaseExist(
                            channel,
                            strName,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        if (nRet >= 1)
                            goto ERROR1;
                    }

                    string strTemplateDir = this.DataDir + "\\templates\\" + "reader";

                    // 根据预先的定义，创建一个数据库
                    nRet = CreateDatabase(channel,
                        strTemplateDir,
                        strName,
                        strLogFileName,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                    created_dbnames.Add(strName);

                    bDbChanged = true;

                    string strInCirculation = DomUtil.GetAttr(request_node,
                        "inCirculation");
                    if (String.IsNullOrEmpty(strInCirculation) == true)
                        strInCirculation = "true";  // 缺省为true

                    // 检查一个单独的图书馆代码是否格式正确
                    // 要求不能为 '*'，不能包含逗号
                    // return:
                    //      -1  校验函数本身出错了
                    //      0   校验正确
                    //      1   校验发现问题。strError中有描述
                    nRet = VerifySingleLibraryCode(strLibraryCode,
        out strError);
                    if (nRet != 0)
                    {
                        strError = "图书馆代码 '" + strLibraryCode + "' 格式错误: " + strError;
                        goto ERROR1;
                    }

                    // 在CfgDom中增加相关的配置信息
                    XmlNode root = this.LibraryCfgDom.DocumentElement.SelectSingleNode("readerdbgroup");
                    if (root == null)
                    {
                        root = this.LibraryCfgDom.CreateElement("readerdbgroup");
                        this.LibraryCfgDom.DocumentElement.AppendChild(root);
                    }

                    XmlNode nodeNewDatabase = null;
                    if (bRecreate == false)
                    {
                        nodeNewDatabase = this.LibraryCfgDom.CreateElement("database");
                        root.AppendChild(nodeNewDatabase);
                    }
                    else
                    {
                        nodeNewDatabase = exist_database_node;
                    }

                    DomUtil.SetAttr(nodeNewDatabase, "name", strName);
                    DomUtil.SetAttr(nodeNewDatabase, "inCirculation", strInCirculation);
                    DomUtil.SetAttr(nodeNewDatabase, "libraryCode", strLibraryCode);    // 2012/9/7

                    // <readerdbgroup>内容更新，刷新配套的内存结构
                    this.LoadReaderDbGroupParam(this.LibraryCfgDom);
                    this.Changed = true;
                    database_nodes.Add(request_node);
                }
                else if (strType == "publisher"
                    || strType == "zhongcihao"
                    || strType == "dictionary"
                    || strType == "inventory")
                {
                    if (SessionInfo.IsGlobalUser(strLibraryCodeList) == false)
                    {
                        strError = "当前用户不是全局用户，不允许创建或重新创建出版者库、种次号库、字典库和盘点库";
                        goto ERROR1;
                    }

                    // 看看同名的 publisher/zhongcihao/dictionary/inventory 数据库是否已经存在?
                    XmlNode nodeDatabase = this.LibraryCfgDom.DocumentElement.SelectSingleNode("utilDb/database[@name='" + strName + "']");
                    if (bRecreate == false)
                    {
                        if (nodeDatabase != null)
                        {
                            strError = strType + "库 '" + strName + "' 的定义已经存在，不能重复创建";
                            goto ERROR1;
                        }
                    }
                    else
                    {
                        if (nodeDatabase == null)
                        {
                            strError = strType + "库 '" + strName + "' 的定义并不存在，无法进行重复创建";
                            return 0;
                        }
                    }

                    // TODO: 是否限定publisher库只能创建一个？
                    // 而zhongcihao库显然是可以创建多个的

                    // 检查dp2kernel中是否有和 publisher/zhongcihao/dictionary/inventory 库同名的数据库存在
                    {
                        // 数据库是否已经存在？
                        // return:
                        //      -1  error
                        //      0   not exist
                        //      1   exist
                        //      2   其他类型的同名对象已经存在
                        nRet = IsDatabaseExist(
                            channel,
                            strName,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        if (nRet >= 1)
                            goto ERROR1;
                    }


                    string strTemplateDir = this.DataDir + "\\templates\\" + strType;

                    // 根据预先的定义，创建一个数据库
                    nRet = CreateDatabase(channel,
                        strTemplateDir,
                        strName,
                        strLogFileName,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                    created_dbnames.Add(strName);
                    bDbChanged = true;  // 2012/12/12

                    // 在CfgDom中增加相关的配置信息
                    XmlNode root = this.LibraryCfgDom.DocumentElement.SelectSingleNode("utilDb");
                    if (root == null)
                    {
                        root = this.LibraryCfgDom.CreateElement("utilDb");
                        this.LibraryCfgDom.DocumentElement.AppendChild(root);
                    }

                    XmlNode nodeNewDatabase = null;
                    if (bRecreate == false)
                    {
                        nodeNewDatabase = this.LibraryCfgDom.CreateElement("database");
                        root.AppendChild(nodeNewDatabase);
                    }
                    else
                    {
                        nodeNewDatabase = nodeDatabase;
                    }

                    DomUtil.SetAttr(nodeNewDatabase, "name", strName);
                    DomUtil.SetAttr(nodeNewDatabase, "type", strType);
                    this.Changed = true;
                    database_nodes.Add(request_node);
                }
                else if (strType == "arrived")
                {
                    if (SessionInfo.IsGlobalUser(strLibraryCodeList) == false)
                    {
                        strError = "当前用户不是全局用户，不允许创建或重新创建预约到书库";
                        goto ERROR1;
                    }

                    // 看看同名的 arrived 数据库是否已经存在?
                    if (bRecreate == false)
                    {
                        if (this.ArrivedDbName == strName)
                        {
                            strError = "预约到书库 '" + strName + "' 的定义已经存在，不能重复创建";
                            goto ERROR1;
                        }
                    }

                    if (String.IsNullOrEmpty(this.ArrivedDbName) == false)
                    {
                        if (bRecreate == true)
                        {
                            if (this.ArrivedDbName != strName)
                            {
                                strError = "已经存在一个预约到书库 '" + this.ArrivedDbName + "' 定义，和您请求重新创建的预约到书库 '" + strName + "' 名字不同。无法直接进行重新创建。请先删除已存在的数据库再进行创建";
                                goto ERROR1;
                            }
                        }
                        else
                        {
                            strError = "要创建新的预约到书库 '" + strName + "'，必须先删除已经存在的预约到书库 '"
                                + this.ArrivedDbName + "'";
                            goto ERROR1;
                        }
                    }

                    // 检查dp2kernel中是否有和arrived库同名的数据库存在
                    {
                        // 数据库是否已经存在？
                        // return:
                        //      -1  error
                        //      0   not exist
                        //      1   exist
                        //      2   其他类型的同名对象已经存在
                        nRet = IsDatabaseExist(
                            channel,
                            strName,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        if (nRet >= 1)
                            goto ERROR1;
                    }

                    string strTemplateDir = this.DataDir + "\\templates\\" + "arrived";

                    // 根据预先的定义，创建一个数据库
                    nRet = CreateDatabase(channel,
                        strTemplateDir,
                        strName,
                         strLogFileName,
                       out strError);
                    if (nRet == -1)
                        goto ERROR1;
                    created_dbnames.Add(strName);
                    bDbChanged = true;  // 2012/12/12

                    // 在CfgDom中增加相关的配置信息
                    this.ArrivedDbName = strName;
                    this.Changed = true;
                    database_nodes.Add(request_node);
                }
                else if (strType == "amerce")
                {
                    if (SessionInfo.IsGlobalUser(strLibraryCodeList) == false)
                    {
                        strError = "当前用户不是全局用户，不允许创建或重新创建违约金库";
                        goto ERROR1;
                    }

                    // 看看同名的amerce数据库是否已经存在?
                    if (bRecreate == false)
                    {
                        if (this.AmerceDbName == strName)
                        {
                            strError = "违约金库 '" + strName + "' 的定义已经存在，不能重复创建";
                            goto ERROR1;
                        }
                    }

                    if (String.IsNullOrEmpty(this.AmerceDbName) == false)
                    {
                        if (bRecreate == true)
                        {
                            if (this.AmerceDbName != strName)
                            {
                                strError = "已经存在一个违约金库 '" + this.AmerceDbName + "' 定义，和您请求重新创建的违约金库 '" + strName + "' 名字不同。无法直接进行重新创建。请先删除已存在的数据库再进行创建";
                                goto ERROR1;
                            }
                        }
                        else
                        {
                            strError = "要创建新的违约金库 '" + strName + "'，必须先删除已经存在的违约金库 '"
                                + this.AmerceDbName + "'";
                            goto ERROR1;
                        }
                    }

                    // 检查dp2kernel中是否有和amerce库同名的数据库存在
                    {
                        // 数据库是否已经存在？
                        // return:
                        //      -1  error
                        //      0   not exist
                        //      1   exist
                        //      2   其他类型的同名对象已经存在
                        nRet = IsDatabaseExist(
                            channel,
                            strName,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        if (nRet >= 1)
                            goto ERROR1;
                    }

                    string strTemplateDir = this.DataDir + "\\templates\\" + "amerce";

                    // 根据预先的定义，创建一个数据库
                    nRet = CreateDatabase(channel,
                        strTemplateDir,
                        strName,
                        strLogFileName,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                    created_dbnames.Add(strName);
                    bDbChanged = true;  // 2012/12/12

                    // 在CfgDom中增加相关的配置信息
                    this.AmerceDbName = strName;
                    this.Changed = true;
                    database_nodes.Add(request_node);
                }
                else if (strType == "message")
                {
                    if (SessionInfo.IsGlobalUser(strLibraryCodeList) == false)
                    {
                        strError = "当前用户不是全局用户，不允许创建或重新创建消息库";
                        goto ERROR1;
                    }

                    // 看看同名的message数据库是否已经存在?
                    if (bRecreate == false)
                    {
                        if (this.MessageDbName == strName)
                        {
                            strError = "消息库 '" + strName + "' 的定义已经存在，不能重复创建";
                            goto ERROR1;
                        }
                    }

                    if (String.IsNullOrEmpty(this.MessageDbName) == false)
                    {
                        if (bRecreate == true)
                        {
                            if (this.MessageDbName != strName)
                            {
                                strError = "已经存在一个消息库 '" + this.MessageDbName + "' 定义，和您请求重新创建的消息库 '" + strName + "' 名字不同。无法直接进行重新创建。请先删除已存在的数据库再进行创建";
                                goto ERROR1;
                            }
                        }
                        else
                        {
                            strError = "要创建新的消息库 '" + strName + "'，必须先删除已经存在的消息库 '"
                                + this.MessageDbName + "'";
                            goto ERROR1;
                        }
                    }

                    // 检查dp2kernel中是否有和message库同名的数据库存在
                    {
                        // 数据库是否已经存在？
                        // return:
                        //      -1  error
                        //      0   not exist
                        //      1   exist
                        //      2   其他类型的同名对象已经存在
                        nRet = IsDatabaseExist(
                            channel,
                            strName,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        if (nRet >= 1)
                            goto ERROR1;
                    }

                    string strTemplateDir = this.DataDir + "\\templates\\" + "message";

                    // 根据预先的定义，创建一个数据库
                    nRet = CreateDatabase(channel,
                        strTemplateDir,
                        strName,
                        strLogFileName,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                    created_dbnames.Add(strName);
                    bDbChanged = true;  // 2012/12/12

                    // 在CfgDom中增加相关的配置信息
                    this.MessageDbName = strName;
                    this.Changed = true;
                    database_nodes.Add(request_node);
                }
                else if (strType == "invoice")
                {
                    if (SessionInfo.IsGlobalUser(strLibraryCodeList) == false)
                    {
                        strError = "当前用户不是全局用户，不允许创建或重新创建发票库";
                        goto ERROR1;
                    }

                    // 看看同名的invoice数据库是否已经存在?
                    if (bRecreate == false)
                    {
                        if (this.InvoiceDbName == strName)
                        {
                            strError = "发票库 '" + strName + "' 的定义已经存在，不能重复创建";
                            goto ERROR1;
                        }
                    }

                    if (String.IsNullOrEmpty(this.InvoiceDbName) == false)
                    {
                        if (bRecreate == true)
                        {
                            if (this.InvoiceDbName != strName)
                            {
                                strError = "已经存在一个发票库 '" + this.InvoiceDbName + "' 定义，和您请求重新创建的发票库 '" + strName + "' 名字不同。无法直接进行重新创建。请先删除已存在的数据库再进行创建";
                                goto ERROR1;
                            }
                        }
                        else
                        {
                            strError = "要创建新的发票库 '" + strName + "'，必须先删除已经存在的发票库 '"
                                + this.InvoiceDbName + "'";
                            goto ERROR1;
                        }
                    }

                    // 检查dp2kernel中是否有和invoice库同名的数据库存在
                    {
                        // 数据库是否已经存在？
                        // return:
                        //      -1  error
                        //      0   not exist
                        //      1   exist
                        //      2   其他类型的同名对象已经存在
                        nRet = IsDatabaseExist(
                            channel,
                            strName,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;
                        if (nRet >= 1)
                            goto ERROR1;
                    }

                    string strTemplateDir = this.DataDir + "\\templates\\" + "invoice";

                    // 根据预先的定义，创建一个数据库
                    nRet = CreateDatabase(channel,
                        strTemplateDir,
                        strName,
                        strLogFileName,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                    created_dbnames.Add(strName);
                    bDbChanged = true;  // 2012/12/12

                    // 在CfgDom中增加相关的配置信息
                    this.InvoiceDbName = strName;
                    this.Changed = true;
                    database_nodes.Add(request_node);
                }
                else if (strType == "pinyin"
                    || strType == "gcat"
                    || strType == "word")
                {
                    string strTypeCaption = "";
                    string strDbName = "";
                    if (strType == "pinyin")
                    {
                        strTypeCaption = "拼音";
                        strDbName = this.PinyinDbName;
                    }
                    if (strType == "gcat")
                    {
                        strTypeCaption = "著者号码";
                        strDbName = this.GcatDbName;
                    }
                    if (strType == "word")
                    {
                        strTypeCaption = "词";
                        strDbName = this.WordDbName;
                    }
                    nRet = CreateDatabase(
                        channel,
                        strType,
                        strTypeCaption,
                        strName,
                        strLibraryCodeList,
                        bRecreate,
                        strLogFileName,
                        ref bDbChanged,
                        ref created_dbnames,
                        ref strDbName,
                        out strError);
                    if (strType == "pinyin")
                        this.PinyinDbName = strDbName;
                    if (strType == "gcat")
                        this.GcatDbName = strDbName;
                    if (strType == "word")
                        this.WordDbName = strDbName;
                    if (nRet == -1)
                        goto ERROR1;
                    database_nodes.Add(request_node);
                }
                else
                {
                    strError = "未知的数据库类型 '" + strType + "'";
                    goto ERROR1;
                }

                if (this.Changed == true)
                    this.ActivateManagerThread();

                created_dbnames.Clear();
            }

            // 写入操作日志
            {
                XmlDocument domOperLog = new XmlDocument();
                domOperLog.LoadXml("<root />");

                DomUtil.SetElementText(domOperLog.DocumentElement,
                    "operation",
                    "manageDatabase");
                DomUtil.SetElementText(domOperLog.DocumentElement,
    "action",
    "createDatabase");

                XmlNode new_node = DomUtil.SetElementText(domOperLog.DocumentElement, "databases",
"");
                StringBuilder text = new StringBuilder();
                foreach (XmlElement node in database_nodes)
                {
                    text.Append(node.OuterXml);
                }
                new_node.InnerXml = text.ToString();

                DomUtil.SetElementText(domOperLog.DocumentElement, "operator",
                    sessioninfo.UserID);

                string strOperTime = this.Clock.GetClock();

                DomUtil.SetElementText(domOperLog.DocumentElement, "operTime",
                    strOperTime);

                using (Stream stream = File.OpenRead(strLogFileName))
                {
                    nRet = this.OperLog.WriteOperLog(domOperLog,
                        sessioninfo.ClientAddress,
                        stream,
                        out strError);
                    if (nRet == -1)
                    {
                        strError = "ManageDatabase() API createDatabase 写入日志时发生错误: " + strError;
                        goto ERROR1;
                    }
                }
            }

            Debug.Assert(created_dbnames.Count == 0, "");

            if (bDbChanged == true)
            {
                nRet = InitialKdbs(
                    Channels,
                    out strError);
                if (nRet == -1)
                    return -1;
                // 重新初始化虚拟库定义
                this.vdbs = null;
                nRet = this.InitialVdbs(Channels,
                    out strError);
                if (nRet == -1)
                    return -1;
            }

            return 1;
        ERROR1:
            List<string> error_deleting_dbnames = new List<string>();
            // 将本次已经创建的数据库在返回前删除掉
            for (int i = 0; i < created_dbnames.Count; i++)
            {
                string strDbName = created_dbnames[i];

                string strError_1 = "";

                long lRet = channel.DoDeleteDB(strDbName, out strError_1);
                if (lRet == -1 && channel.ErrorCode != ChannelErrorCode.NotFound)
                    continue;
                if (lRet == -1)
                    error_deleting_dbnames.Add(strDbName + "[错误:" + strError_1 + "]");
            }

            if (error_deleting_dbnames.Count > 0)
            {
                strError = strError + ";\r\n并在删除刚创建的数据库时发生错误，下列数据库未被删除:" + StringUtil.MakePathList(error_deleting_dbnames);
                return -1;
            }

            return -1;
        }


		~~~~~~~~~~~~~

		        int CreateDatabase(RmsChannel channel,
    string strTemplateDir,
    string strDatabaseName,
    string strLogFileName,
    out string strError)
        {
            strError = "";

            int nRet = 0;

            string strTempDir = "";

            if (string.IsNullOrEmpty(strLogFileName) == false)
            {
                strTempDir = Path.Combine(this.TempDir, "~" + Guid.NewGuid().ToString());
                PathUtil.TryCreateDir(strTempDir);
            }

            try
            {

                List<string[]> logicNames = new List<string[]>();

                string[] cols = new string[2];
                cols[1] = "zh";
                cols[0] = strDatabaseName;
                logicNames.Add(cols);

                string strKeysDefFileName = PathUtil.MergePath(strTemplateDir, "keys");
                string strBrowseDefFileName = PathUtil.MergePath(strTemplateDir, "browse");

                nRet = ConvertGb2312TextfileToUtf8(strKeysDefFileName,
                    out strError);
                if (nRet == -1)
                    return -1;

                CopyTempFile(strKeysDefFileName, strTempDir, strDatabaseName);

                nRet = ConvertGb2312TextfileToUtf8(strBrowseDefFileName,
                    out strError);
                if (nRet == -1)
                    return -1;

                CopyTempFile(strBrowseDefFileName, strTempDir, strDatabaseName);

                string strKeysDef = "";
                string strBrowseDef = "";

                try
                {
                    using (StreamReader sr = new StreamReader(strKeysDefFileName, Encoding.UTF8))
                    {
                        strKeysDef = sr.ReadToEnd();
                    }
                }
                catch (Exception ex)
                {
                    strError = "装载文件 " + strKeysDefFileName + " 时发生错误: " + ex.Message;
                    return -1;
                }

                try
                {
                    using (StreamReader sr = new StreamReader(strBrowseDefFileName, Encoding.UTF8))
                    {
                        strBrowseDef = sr.ReadToEnd();
                    }
                }
                catch (Exception ex)
                {
                    strError = "装载文件 " + strBrowseDefFileName + " 时发生错误: " + ex.Message;
                    return -1;
                }

                long lRet = channel.DoCreateDB(logicNames,
                    "", // strType,
                    "", // strSqlDbName,
                    strKeysDef,
                    strBrowseDef,
                    out strError);
                if (lRet == -1)
                {
                    strError = "创建数据库 " + strDatabaseName + " 时发生错误: " + strError;
                    return -1;
                }

                lRet = channel.DoInitialDB(strDatabaseName,
                    out strError);
                if (lRet == -1)
                {
                    strError = "初始化数据库 " + strDatabaseName + " 时发生错误: " + strError;
                    return -1;
                }

                // 增补其他数据从属对象

                /*
                List<string> subdirs = new List<string>();
                // 创建所有目录对象
                GetSubdirs(strTemplateDir, ref subdirs);
                for (int i = 0; i < subdirs.Count; i++)
                {
                    string strDiskPath = subdirs[i];

                    // 反过来推算为逻辑路径
                    // 或者预先在获得的数组中就存放为部分(逻辑)路径？
                    string strPath = "";

                    // 在服务器端创建对象
                    // parameters:
                    //      strStyle    风格。当创建目录的时候，为"createdir"，否则为空
                    // return:
                    //		-1	错误
                    //		1	以及存在同名对象
                    //		0	正常返回
                    nRet = NewServerSideObject(
                        channel,
                        strPath,
                        "createdir",
                        null,
                        null,
                        out strError);
                    if (nRet == -1)
                        return -1;
                }
                    // 列出每个目录中的文件，并在服务器端创建之
                    // 注意模板目录下的文件，被当作cfgs中的文件来创建
                 * */

                DirectoryInfo di = new DirectoryInfo(strTemplateDir);
                FileInfo[] fis = di.GetFiles();

                // 创建所有文件对象
                for (int i = 0; i < fis.Length; i++)
                {
                    string strName = fis[i].Name;
                    if (strName == "." || strName == "..")
                        continue;

                    if (strName.ToLower() == "keys"
                        || strName.ToLower() == "browse")
                        continue;

                    string strFullPath = fis[i].FullName;

                    nRet = ConvertGb2312TextfileToUtf8(strFullPath,
                        out strError);
                    if (nRet == -1)
                        return -1;

                    CopyTempFile(strFullPath, strTempDir, strDatabaseName);

                    using (Stream s = new FileStream(strFullPath, FileMode.Open))
                    {
                        string strPath = strDatabaseName + "/cfgs/" + strName;
                        // 在服务器端创建对象
                        // parameters:
                        //      strStyle    风格。当创建目录的时候，为"createdir"，否则为空
                        // return:
                        //		-1	错误
                        //		1	以及存在同名对象
                        //		0	正常返回
                        nRet = NewServerSideObject(
                            channel,
                            strPath,
                            "",
                            s,
                            null,
                            out strError);
                        if (nRet == -1)
                            return -1;
                    }
                }

                if (string.IsNullOrEmpty(strLogFileName) == false)
                {
                    nRet = CompressDirectory(
                        strTempDir,
                        strTempDir,
                        strLogFileName,
                        Encoding.UTF8,
                        true,
                        out strError);
                    if (nRet == -1)
                        return -1;
                }

                return 0;
            }
            finally
            {
                if (string.IsNullOrEmpty(strTempDir) == false)
                    PathUtil.DeleteDirectory(strTempDir);
            }
        }


		~~~~~~~~~~~~~~~~

		        // 修改一个书目库下属数据库的名字
        // 也会自动修改 library.xml 中相关元素
        // parameters:
        //      strLibraryCodeList  当前用户所管辖的分馆代码列表
        //      strChangeStyle  attach/detach/空。attach 表示将 dp2kernel 中数据库附加上来。detach 表示将 dp2library 用到的某个数据库从 library.xml 中摘除(但数据库已经在 dp2kernel 中存在)
        //      bDbNameChanged  如果数据库发生了删除或者修改名字的情况，此参数会被设置为 true。否则其值不会发生改变
        // return:
        //      -1  出错
        //      0   指定的(源)数据库不存在
        //      1   成功修改
        int ChangeBiblioChildDbName(
            RmsChannel channel,
            string strLibraryCodeList,
            string strOldDbName,
            XmlElement nodeNewDatabase,
            string strChangeStyle,
            ref bool bDbNameChanged,
            out string strError)
        {
            strError = "";
            int nRet = 0;

            string strDbType = GetDbTypeByDbName(strOldDbName);

            // 类型。只有当 attach 和 detach 时候才有用到
            string strNewType = DomUtil.GetAttr(nodeNewDatabase, "type");
            if (StringUtil.IsInList("detach", strChangeStyle)
                || StringUtil.IsInList("attach", strChangeStyle))
            {
                if (string.IsNullOrEmpty(strNewType))
                {
                    strError = "attach 或 detach 情况，请求的 database/@type 属性不应缺失";
                    return -1;
                }
                if (string.IsNullOrEmpty(strDbType))
                    strDbType = strNewType;
            }

            // TODO: 要注意数据库已经不存在的情况下是否会造成这里报错
            if (string.IsNullOrEmpty(strDbType))
            {
                strError = "数据库 '" + strOldDbName + "' 的类型未知";
                return -1;
            }

            // 根据数据库类型，获得在 itemdbgroup/database 元素中的相关属性名
            string strAttrName = GetBiblioChildDbAttributeName(strDbType);
            if (string.IsNullOrEmpty(strAttrName))
            {
                strError = "数据库类型 '" + strOldDbName + "' 无法找到对应的 itemdbgroup/database 元素内的对应属性名";
                return -1;
            }

            string strCaption = GetTypeCaption(strDbType);

            // 获得相关配置小节
            XmlElement nodeDatabase = this.LibraryCfgDom.DocumentElement.SelectSingleNode("itemdbgroup/database[@" + strAttrName + "='" + strOldDbName + "']") as XmlElement;
            if (nodeDatabase == null)
            {
                strError = "library.xml 中名字为 '" + strOldDbName + "' 的实体库(name属性)相关<database>元素没有找到";
                return 0;
            }

            if (SessionInfo.IsGlobalUser(strLibraryCodeList) == false)
            {
                strError = "当前用户不是全局用户，不允许修改实体库定义";
                return -1;
            }

            // 实体库名
            string strOldEntityDbName = DomUtil.GetAttr(nodeDatabase,
                strAttrName);

            if (strOldEntityDbName != strOldDbName)
            {
                strError = "内部错误: strOldEntityDbName (" + strOldEntityDbName + ") != strOldDbName (" + strOldDbName + ")";
                return -1;
            }

            // 来自strDatabaseInfo
            string strNewEntityDbName = DomUtil.GetAttr(nodeNewDatabase,
                "name");    // 注意这是请求参数 XML 中的 database/@name 属性

            if (StringUtil.IsInList("detach", strChangeStyle)
    || StringUtil.IsInList("attach", strChangeStyle))
            {

                // 源名字的数据库应当存在；目标名字的数据库应当不存在
                // return:
                //      -1  error
                //      0   not exist
                //      1   exist
                //      2   其他类型的同名对象已经存在
                nRet = DatabaseUtility.IsDatabaseExist(
                    channel,
                    strOldEntityDbName,
                    out strError);
                if (nRet == -1)
                    return -1;
                if (nRet == 0)
                {
                    strError = "源数据库 '" + strOldEntityDbName + "' 并不存在。attach 或 detach 失败";
                    return -1;
                }

                nRet = DatabaseUtility.IsDatabaseExist(
    channel,
    strNewEntityDbName,
    out strError);
                if (nRet == -1)
                    return -1;
                if (nRet == 0)
                {
                    strError = "目标数据库 '" + strNewEntityDbName + "' 已经存在。attach 或 detach 失败";
                    return -1;
                }
            }

            if (strOldEntityDbName != strNewEntityDbName)
            {
                if (String.IsNullOrEmpty(strOldEntityDbName) == true
                    && String.IsNullOrEmpty(strNewEntityDbName) == false)
                {
                    strError = "要创建" + strCaption + "库 '" + strNewEntityDbName + "'，请使用 create 功能，而不能使用 change 功能";
                    return -1;
                }

                if (String.IsNullOrEmpty(strOldEntityDbName) == false
                    && String.IsNullOrEmpty(strNewEntityDbName) == true)
                {
                    strError = "要删除" + strCaption + "库 '" + strNewEntityDbName + "'，请使用 delete 功能，而不能使用 change 功能";
                    return -1;
                }

                bool bTemp = false;
                nRet = ChangeDbName(
                    channel,
                    strOldEntityDbName,
                    strNewEntityDbName,
                        () =>
                        {
                            if (StringUtil.IsInList("detach", strChangeStyle))
                                nodeDatabase.RemoveAttribute(strAttrName);  // library.xml 中去掉这个数据库的痕迹
                            else
                                DomUtil.SetAttr(nodeDatabase, strAttrName, strNewEntityDbName);
                            bTemp = true;
                            this.Changed = true;
                        },
                    out strError);
                if (bTemp)
                    bDbNameChanged = true;
                if (nRet == -1)
                    return -1;
            }
            else
            {
                // 如果 strOldEntityDbName == strNewEntityDbName，依然要处理 detach 和 attach 情况
                if (StringUtil.IsInList("detach", strChangeStyle))
                {
                    nodeDatabase.RemoveAttribute(strAttrName);  // library.xml 中去掉这个数据库的痕迹
                    bDbNameChanged = true;
                    this.Changed = true;
                }
                else if (StringUtil.IsInList("attach", strChangeStyle))
                {
                    DomUtil.SetAttr(nodeDatabase, strAttrName, strNewEntityDbName);
                    bDbNameChanged = true;
                    this.Changed = true;
                }
            }

            // 是否参与流通
            if (strDbType == "entity")
            {
                string strOldInCirculation = DomUtil.GetAttr(nodeDatabase,
                    "inCirculation");
                if (String.IsNullOrEmpty(strOldInCirculation) == true)
                    strOldInCirculation = "true";

                string strNewInCirculation = DomUtil.GetAttr(nodeNewDatabase,
                    "inCirculation");
                if (String.IsNullOrEmpty(strNewInCirculation) == true)
                    strNewInCirculation = "true";

                if (strOldInCirculation != strNewInCirculation)
                {
                    DomUtil.SetAttr(nodeDatabase, "inCirculation",
                        strNewInCirculation);
                    this.Changed = true;
                }

            }

            // <itemdbgroup>内容更新，刷新配套的内存结构
            nRet = this.LoadItemDbGroupParam(this.LibraryCfgDom,
                out strError);
            if (nRet == -1)
            {
                this.WriteErrorLog(strError);
                return -1;
            }

            this.Changed = true;
            return 1;
        }


		~~~~~~~~~~~~~~~

		                #region biblio
                // 书目库整体删除，也是可以的
                // TODO: 将来可以考虑单独删除书目库而不删除组内相关库
                if (this.IsBiblioDbName(strName) == true)
                {
                    // 删除一个书目库。
                    // 根据书目库的库名，在 library.xml 的 itemdbgroup 中找出所有下属库的库名，然后删除它们
                    // return:
                    //      -1  出错
                    //      0   指定的数据库不存在
                    //      1   成功删除
                    nRet = DeleteBiblioDatabase(
                        channel,
                        strLibraryCodeList,
                        strName,
                        ref bDbNameChanged,
                        out strError);
                    if (nRet == -1)
                        return -1;
                    if (nRet == 0)
                        return 0;
#if NO
                    // 获得相关配置小节
                    XmlNode nodeDatabase = this.LibraryCfgDom.DocumentElement.SelectSingleNode("itemdbgroup/database[@biblioDbName='" + strName + "']");
                    if (nodeDatabase == null)
                    {
                        strError = "配置 DOM 中名字为 '" + strName + "' 的书目库(biblioDbName属性)相关<database>元素没有找到";
                        return 0;
                    }

                    if (SessionInfo.IsGlobalUser(strLibraryCodeList) == false)
                    {
                        strError = "当前用户不是全局用户，不允许删除书目库";
                        return -1;
                    }

                    // 删除书目库
                    nRet = DeleteDatabase(channel, strName, strLogFileName,
out strError);
                    if (nRet == -1)
                    {
                        strError = "删除书目库 '" + strName + "' 时发生错误: " + strError;
                        return -1;
                    }

                    bDbNameChanged = true;

                    // 删除实体库
                    string strEntityDbName = DomUtil.GetAttr(nodeDatabase, "name");
                    if (String.IsNullOrEmpty(strEntityDbName) == false)
                    {
                        nRet = DeleteDatabase(channel,
                            strEntityDbName,
                            strLogFileName,
                            out strError);
                        if (nRet == -1)
                        {
                            strError = "删除书目库 '" + strName + "' 所从属的实体库 '" + strEntityDbName + "' 时发生错误: " + strError;
                            return -1;
                        }
                    }

                    // 删除订购库
                    string strOrderDbName = DomUtil.GetAttr(nodeDatabase, "orderDbName");
                    if (String.IsNullOrEmpty(strOrderDbName) == false)
                    {
                        nRet = DeleteDatabase(channel, strOrderDbName, strLogFileName,
out strError);
                        if (nRet == -1)
                        {
                            strError = "删除书目库 '" + strName + "' 所从属的订购库 '" + strOrderDbName + "' 时发生错误: " + strError;
                            return -1;
                        }
                    }

                    // 删除期库
                    string strIssueDbName = DomUtil.GetAttr(nodeDatabase, "issueDbName");
                    if (String.IsNullOrEmpty(strIssueDbName) == false)
                    {
                        nRet = DeleteDatabase(channel, strIssueDbName, strLogFileName,
out strError);
                        if (nRet == -1)
                        {
                            strError = "删除书目库 '" + strName + "' 所从属的期库 '" + strIssueDbName + "' 时发生错误: " + strError;
                            return -1;
                        }
                    }

                    // 删除评注库
                    string strCommentDbName = DomUtil.GetAttr(nodeDatabase, "commentDbName");
                    if (String.IsNullOrEmpty(strCommentDbName) == false)
                    {
                        nRet = DeleteDatabase(channel, strCommentDbName, strLogFileName,
out strError);
                        if (nRet == -1)
                        {
                            strError = "删除书目库 '" + strName + "' 所从属的评注库 '" + strCommentDbName + "' 时发生错误: " + strError;
                            return -1;
                        }
                    }

                    nodeDatabase.ParentNode.RemoveChild(nodeDatabase);

                    // <itemdbgroup>内容更新，刷新配套的内存结构
                    nRet = this.LoadItemDbGroupParam(this.LibraryCfgDom,
                        out strError);
                    if (nRet == -1)
                    {
                        this.WriteErrorLog(strError);
                        return -1;
                    }

                    this.Changed = true;
                    // this.ActivateManagerThread();
#endif

                    continue;
                }

                #endregion


				~~~~~~~~~~~~~~

				                #region 特殊名字


                // 特殊名字
                // TODO: 可以有个功能把特殊名字变换为普通名字，然后就可以执行后面的功能了
                if (strName[0] == '#')
                {
                    if (strName == "#reader")
                    {
                        // 读者库
                        for (int j = 0; j < this.ReaderDbs.Count; j++)
                        {
                            string strDbName = this.ReaderDbs[j].DbName;
                            string strLibraryCode = this.ReaderDbs[j].LibraryCode;

                            // 2012/9/9
                            // 只允许当前用户看到自己管辖的读者库
                            if (SessionInfo.IsGlobalUser(strLibraryCodeList) == false)
                            {
                                if (string.IsNullOrEmpty(strLibraryCode) == true
                                    || StringUtil.IsInList(strLibraryCode, strLibraryCodeList) == false)
                                    continue;
                            }

                            XmlNode nodeDatabase = dom.CreateElement("database");
                            dom.DocumentElement.AppendChild(nodeDatabase);

                            DomUtil.SetAttr(nodeDatabase, "type", "reader");
                            DomUtil.SetAttr(nodeDatabase, "name", strDbName);
                            string strInCirculation = this.ReaderDbs[j].InCirculation == true ? "true" : "false";
                            DomUtil.SetAttr(nodeDatabase, "inCirculation", strInCirculation);

                            DomUtil.SetAttr(nodeDatabase, "libraryCode", strLibraryCode);
                        }
                    }
                    else if (strName == "#biblio")
                    {
                        // 实体库(书目库)
                        for (int j = 0; j < this.ItemDbs.Count; j++)
                        {
                            XmlNode nodeDatabase = dom.CreateElement("database");
                            dom.DocumentElement.AppendChild(nodeDatabase);

                            ItemDbCfg cfg = this.ItemDbs[j];

                            DomUtil.SetAttr(nodeDatabase, "type", "biblio");
                            DomUtil.SetAttr(nodeDatabase, "name", cfg.BiblioDbName);
                            DomUtil.SetAttr(nodeDatabase, "syntax", cfg.BiblioDbSyntax);
                            DomUtil.SetAttr(nodeDatabase, "entityDbName", cfg.DbName);
                            DomUtil.SetAttr(nodeDatabase, "orderDbName", cfg.OrderDbName);
                            DomUtil.SetAttr(nodeDatabase, "issueDbName", cfg.IssueDbName);
                            DomUtil.SetAttr(nodeDatabase, "commentDbName", cfg.CommentDbName);
                            DomUtil.SetAttr(nodeDatabase, "unionCatalogStyle", cfg.UnionCatalogStyle);
                            string strInCirculation = cfg.InCirculation == true ? "true" : "false";
                            DomUtil.SetAttr(nodeDatabase, "inCirculation", strInCirculation);
                            DomUtil.SetAttr(nodeDatabase, "role", cfg.Role);    // 2009/10/23
                            DomUtil.SetAttr(nodeDatabase, "replication", cfg.Replication);    // 2009/10/23
                            /*
                            DomUtil.SetAttr(nodeDatabase, "biblioDbName", cfg.BiblioDbName);
                            DomUtil.SetAttr(nodeDatabase, "itemDbName", cfg.DbName);
                             * */
                        }
                    }
                    else if (strName == "#arrived")
                    {
                        if (String.IsNullOrEmpty(this.ArrivedDbName) == true)
                            continue;

                        XmlNode nodeDatabase = dom.CreateElement("database");
                        dom.DocumentElement.AppendChild(nodeDatabase);

                        DomUtil.SetAttr(nodeDatabase, "type", "arrived");
                        DomUtil.SetAttr(nodeDatabase, "name", this.ArrivedDbName);
                    }
                    else if (strName == "#amerce")
                    {
                        if (String.IsNullOrEmpty(this.AmerceDbName) == true)
                            continue;

                        XmlNode nodeDatabase = dom.CreateElement("database");
                        dom.DocumentElement.AppendChild(nodeDatabase);

                        DomUtil.SetAttr(nodeDatabase, "type", "amerce");
                        DomUtil.SetAttr(nodeDatabase, "name", this.AmerceDbName);
                    }
                    else if (strName == "#invoice")
                    {
                        if (String.IsNullOrEmpty(this.InvoiceDbName) == true)
                            continue;

                        XmlNode nodeDatabase = dom.CreateElement("database");
                        dom.DocumentElement.AppendChild(nodeDatabase);

                        DomUtil.SetAttr(nodeDatabase, "type", "invoice");
                        DomUtil.SetAttr(nodeDatabase, "name", this.InvoiceDbName);
                    }
                    else if (strName == "#message")
                    {
                        if (String.IsNullOrEmpty(this.MessageDbName) == true)
                            continue;

                        XmlNode nodeDatabase = dom.CreateElement("database");
                        dom.DocumentElement.AppendChild(nodeDatabase);

                        DomUtil.SetAttr(nodeDatabase, "type", "message");
                        DomUtil.SetAttr(nodeDatabase, "name", this.MessageDbName);
                    }
                    else if (strName == "#pinyin"
                        || strName == "#gcat"
                        || strName == "#word")
                    {
                        string strDbName = "";
                        if (strName == "#pinyin")
                            strDbName = this.PinyinDbName;
                        if (strName == "#gcat")
                            strDbName = this.GcatDbName;
                        if (strName == "#word")
                            strDbName = this.WordDbName;

                        if (String.IsNullOrEmpty(strDbName) == true)
                            continue;

                        XmlNode nodeDatabase = dom.CreateElement("database");
                        dom.DocumentElement.AppendChild(nodeDatabase);

                        DomUtil.SetAttr(nodeDatabase, "type", strName.Substring(1));
                        DomUtil.SetAttr(nodeDatabase, "name", strDbName);
                    }
                    else if (strName == "#util"
                        || strName == "#publisher"
                        || strName == "#zhongcihao"
                        || strName == "#dictionary"
                        || strName == "#inventory")
                    {
                        string strType = "";
                        if (strName != "#util")
                            strType = strName.Substring(1);
                        XmlNodeList nodes = null;
                        if (string.IsNullOrEmpty(strType) == true)
                            nodes = this.LibraryCfgDom.DocumentElement.SelectNodes("utilDb/database");
                        else
                            nodes = this.LibraryCfgDom.DocumentElement.SelectNodes("utilDb/database[@type='" + strType + "']");
                        foreach (XmlNode node in nodes)
                        {
                            XmlNode nodeDatabase = dom.CreateElement("database");
                            dom.DocumentElement.AppendChild(nodeDatabase);

                            DomUtil.SetAttr(nodeDatabase, "type", DomUtil.GetAttr(node, "type"));
                            DomUtil.SetAttr(nodeDatabase, "name", DomUtil.GetAttr(node, "name"));
                        }
                    }
#if NO
                    else if (strName == "#zhongcihao")
                    {
                        XmlNodeList nodes = this.LibraryCfgDom.DocumentElement.SelectNodes("utilDb/database[@type='zhongcihao']");
                        for (int j = 0; j < nodes.Count; j++)
                        {
                            XmlNode nodeDatabase = dom.CreateElement("database");
                            dom.DocumentElement.AppendChild(nodeDatabase);

                            DomUtil.SetAttr(nodeDatabase, "type", "zhongcihao");
                            string strTemp = DomUtil.GetAttr(nodes[j], "name");
                            DomUtil.SetAttr(nodeDatabase, "name", strTemp);
                        }
                    }
#endif
                    else if (strName == "#_accessLog")
                    {
                        // 2015/11/26
                        if (string.IsNullOrEmpty(this.MongoDbConnStr) == false
                            && this.AccessLogDatabase != null)
                        {
                            XmlNode nodeDatabase = dom.CreateElement("database");
                            dom.DocumentElement.AppendChild(nodeDatabase);

                            DomUtil.SetAttr(nodeDatabase, "type", "_accessLog");
                            DomUtil.SetAttr(nodeDatabase, "name", AccessLogDbName);
                        }
                    }
                    else if (strName == "#_hitcount")
                    {
                        // 2015/11/26
                        if (string.IsNullOrEmpty(this.MongoDbConnStr) == false
                            && this.AccessLogDatabase != null)
                        {
                            XmlNode nodeDatabase = dom.CreateElement("database");
                            dom.DocumentElement.AppendChild(nodeDatabase);

                            DomUtil.SetAttr(nodeDatabase, "type", "_hitcount");
                            DomUtil.SetAttr(nodeDatabase, "name", HitCountDbName);
                        }
                    }
                    else if (strName == "#_chargingOper")
                    {
                        // 2016/1/10
                        if (string.IsNullOrEmpty(this.MongoDbConnStr) == false
                            && this.ChargingOperDatabase != null)
                        {
                            XmlNode nodeDatabase = dom.CreateElement("database");
                            dom.DocumentElement.AppendChild(nodeDatabase);

                            DomUtil.SetAttr(nodeDatabase, "type", "_chargingOper");
                            DomUtil.SetAttr(nodeDatabase, "name", ChargingHistoryDbName);
                        }
                    }
                    else if (strName == "#_biblioSummary")
                    {
                        // 2016/8/30
                        if (string.IsNullOrEmpty(this.MongoDbConnStr) == false
                            && this.SummaryCollection != null)
                        {
                            XmlNode nodeDatabase = dom.CreateElement("database");
                            dom.DocumentElement.AppendChild(nodeDatabase);

                            DomUtil.SetAttr(nodeDatabase, "type", "_biblioSummary");
                            DomUtil.SetAttr(nodeDatabase, "name", BiblioSummaryDbName);
                        }
                    }
                    else
                    {
                        strError = "不可识别的数据库名 '" + strName + "'";
                        return 0;
                    }
                    continue;
                }
                #endregion


				~~~

				        // 根据首字母查找范围属性
        // parameters:
        //		strPinyin	一个汉字的拼音。如果==""，表示找第一个r元素
        // return:
        //		-1	出错
        //		0	没有找到
        //		1	找到
        public static int GetSubRange(XmlDocument dom,
            string strPinyin,
            bool bOutputDebugInfo,
            out string strValue,
            out string strFufen,
            out string strDebugInfo,
            out string strError)
        {
            strValue = "";
            strFufen = "";
            strError = "";
            strDebugInfo = "";

            string strLast = "A";

            if (bOutputDebugInfo == true)
            {
                strDebugInfo += "缺省的第一个范围的起始字母为 '" + strLast + "'。\r\n";
            }

            int nElementCount = 0;
            XmlNode nodeDefault = null;

            string strHitValue = "";
            string strHitFufen = "";

            for (int i = 0; i < dom.DocumentElement.ChildNodes.Count; i++)
            {
                XmlNode node = dom.DocumentElement.ChildNodes[i];
                if (node.NodeType != XmlNodeType.Element)
                    continue;
                if (node.Name != "r")
                    continue;

                nElementCount++;

                string strRange = DomUtil.GetAttr(node, "n");

                if (strRange == "")
                    nodeDefault = node;

                if (bOutputDebugInfo == true)
                {
                    strDebugInfo += "范围字符串 '" + strRange + "' \r\n";
                }

                if (strPinyin != "")
                {
                    if (strRange == "")
                    {
                        if (bOutputDebugInfo == true)
                        {
                            strDebugInfo += "用非空拼音查找，则遇空范围要越过。\r\n";
                        }
                        continue;
                    }
                }

                strValue = DomUtil.GetAttr(node, "v");
                strFufen = DomUtil.GetAttr(node, "f");

                if (strPinyin == "")
                    return 1;

                string strStart = "";
                string strTail = "";

                int nRet = strRange.IndexOf("-");
                if (nRet != -1)
                {
                    strStart = strRange.Substring(0, nRet).Trim();
                    strTail = strRange.Substring(nRet + 1).Trim();
                }
                else
                {
                    strStart = strLast;
                    strTail = strRange;
                }

                if (bOutputDebugInfo == true)
                {
                    strDebugInfo += "范围字符串被处理为 start='" + strStart + "' tail='" + strTail + "'\r\n";
                }

                // 做事

                // return:
                //		负数	在范围左边
                //		0	落入范围
                //		正数	在范围右边
#if NO
                if ((strStart.Length > 1 || strTail.Length > 1)
                    && strStart.Length == strTail.Length && strPinyin.Length == strStart.Length)
                {
                    nRet = LocateExactRange(strStart,
                        strTail,
                        strPinyin);
                }
                else
#endif
                {
                    nRet = LocateRange(strStart,
                        strTail,
                        strPinyin);
                }
                if (nRet < 0)
                {
                    if (strHitValue != "")
                    {
                        strValue = strHitValue;
                        strFufen = strHitFufen;
                        if (bOutputDebugInfo == true)
                        {
                            strDebugInfo += "当前条目范围已偏向比测试值左方。但先前条目命中过。所以返回value='" + strValue + "' fufen='" + strFufen + "'\r\n";
                        }
                        return 1;
                    }
                    strError = "拼音 '" + strPinyin + "' 没有找到对应的范围\r\n\r\n" + strDebugInfo;
                    return 0;
                }

                if (nRet == 0)
                {
                    // 记下曾经命中
                    strHitValue = strValue;
                    strHitFufen = strFufen;

                    if (bOutputDebugInfo == true)
                    {
                        strDebugInfo += "命中。但是继续向后探测。\r\n";
                    }

                    // 继续向后探测

                }


                // ? Debug.Assert(nRet > 0, "");


                // 把strTail的第一字母加一
                if (strTail.Length == 0)
                {
                    strError = "range '" + strRange + "' 时tail为空";
                    return -1;
                }

#if NO
                strLast = ((char)((int)strTail[0] + 1)).ToString();	// 为下一次准备起点
                // strLast = strTail;   // 最后一个字母如果为 'Z'，要进位。类似十进制数字
#endif
                strLast = GetNextString(strTail);

                if (bOutputDebugInfo == true)
                {
                    strDebugInfo += "为下一范围准备好起始字母 '" + strLast + "' 是根据当前tail '" + strTail + "' 首字母增量而来\r\n";
                }
            }

            if (strHitValue != "")	// 曾经命中过
            {
                strValue = strHitValue;
                strFufen = strHitFufen;
                if (bOutputDebugInfo == true)
                {
                    strDebugInfo += "测试完全部条目。先前条目命中过。所以返回value='" + strValue + "' fufen='" + strFufen + "'\r\n";
                }
                return 1;
            }

            if (nElementCount == 1)
            {
                if (nodeDefault != null)
                {
                    strValue = DomUtil.GetAttr(nodeDefault, "v");
                    strFufen = DomUtil.GetAttr(nodeDefault, "f");
                    if (bOutputDebugInfo == true)
                    {
                        strDebugInfo += "著者号码XML记录中只有一个范围，n参数为空，那么无论什么拼音都能匹配";
                        strDebugInfo += "命中。返回value='" + strValue + "' fufen='" + strFufen + "'\r\n";
                    }
                    return 1;
                }
            }

            if (bOutputDebugInfo == true)
            {
                strDebugInfo += "没有找到。\r\n";
            }

            return 0;
        }


        ~~~~~~~~~
        2020/12/18

                // 获得册记录。
        // 2018/5/12 重构为独立函数
        // parameters:
        //      strOwnerInstitution 所属机构。如果为 null 表示不使用这个参数。它可能为 RFID 的 OI 或者 AOI 字段
        LibraryServerResult GetItemRecord(SessionInfo sessioninfo,
            string strItemBarcode,
            string strOwnerInstitution,
            ref string strItemFrom, // 号码实际上属于哪个检索途径?
            string strConfirmItemRecPath,
            // ref string strLibraryCode,
            out List<string> aPath,
            out string strItemXml,
            out string strOutputItemRecPath,
            out byte[] item_timestamp)
        {
            aPath = new List<string>();
            string strError = "";
            int nRet = 0;

            LibraryServerResult result = new LibraryServerResult();

            strOutputItemRecPath = "";
            strItemXml = "";
            item_timestamp = null;

            RmsChannel channel = sessioninfo.Channels.GetChannel(this.WsUrl);
            if (channel == null)
            {
                strError = "get channel error";
                goto ERROR1;
            }

            // 如果已经有确定的册记录路径
            if (String.IsNullOrEmpty(strConfirmItemRecPath) == false)
            {
                // 检查路径中的库名，是不是实体库名
                // return:
                //      -1  error
                //      0   不是实体库名
                //      1   是实体库名
                nRet = this.CheckItemRecPath(strConfirmItemRecPath,
                    out strError);
                if (nRet == -1)
                    goto ERROR1;
                if (nRet == 0)
                {
                    strError = strConfirmItemRecPath + strError;
                    goto ERROR1;
                }


                long lRet = channel.GetRes(strConfirmItemRecPath,
                    out strItemXml,
                    out string strMetaData,
                    out item_timestamp,
                    out strOutputItemRecPath,
                    out strError);
                if (lRet == -1)
                {
                    // text-level: 内部错误
                    strError = "(GetItemRecord)根据 strConfirmItemRecPath '" + strConfirmItemRecPath + "' 获得册记录失败: " + strError;
                    goto ERROR1;
                }
            }
            else
            {
                if (string.IsNullOrEmpty(strItemBarcode) == true)
                {
                    strError = "册条码号不应为空";
                    goto ERROR1;
                }

                // 从册条码号获得册记录

                // 获得册记录
                // return:
                //      -1  error
                //      0   not found
                //      1   命中1条
                //      >1  命中多于1条
                nRet = this.GetItemRecXml(
                    channel,
                    strItemBarcode,
                    "first",    // 在若干实体库中顺次检索，命中一个以上则返回，不再继续检索更多
                    out strItemXml,
                    100,
                    out aPath,
                    out item_timestamp,
                    out strError);
                if (nRet == 0)
                {
                    {
                        // 2018/5/12
                        // 如果需要，从登录号等辅助途径进行检索
                        foreach (string strFrom in this.ItemAdditionalFroms)
                        {
                            // return:
                            //      -1  error
                            //      0   not found
                            //      1   命中1条
                            //      >1  命中多于1条
                            nRet = this.GetOneItemRec(
                                channel,
                                "item",
                                strItemBarcode,
                                strFrom,
                                "xml,timestamp",
                                out strItemXml,
                                10,
                                out aPath,
                                out item_timestamp,
                                out strError);
#if NO
                            nRet = this.GetItemRecXmlByFrom(
                                channel,
                                null,
                                strReaderBarcode,
                                strFrom,
                                out strReaderXml,
                                out strOutputReaderRecPath,
                                out reader_timestamp,
                                out strError);
#endif
                            if (nRet == -1)
                            {
                                // text-level: 内部错误
                                strError = "用" + strFrom + " '" + strItemBarcode + "' 从途径 '" + strFrom + "' 读入册记录时发生错误: " + strError;
                                goto ERROR1;
                            }
                            if (nRet == 0)
                                continue;
                            if (nRet > 1)
                            {
#if NO
                                if (this.Statis != null)
                                    this.Statis.IncreaseEntryValue(
                                        strLibraryCode,
                                        "出纳",
                                        "借书遇" + strFrom + "重复次数",
                                        1);
#endif
                                // text-level: 用户提示
                                result.Value = -1;
                                result.ErrorInfo = "用" + strFrom + " '" + strItemBarcode + "' 检索册记录命中 " + nRet.ToString() + " 条，因此无法用" + strFrom + "来进行借还操作。请改用册条码号来进行借还操作。";
                                result.ErrorCode = ErrorCode.ItemBarcodeDup;
                                // aDupPath = aPath.ToArray();
                                // this.WriteErrorLog(result.ErrorInfo);
                                return result;
                            }

                            // strItemBarcode = "";
                            strItemFrom = strFrom;

#if NO
                            result.ErrorInfo = strError;
                            result.Value = nRet;
#endif
                            goto SKIP0;
                        }
                    }



                    ////

                    result.Value = -1;
                    // text-level: 用户提示
                    result.ErrorInfo = string.Format(this.GetString("册条码号s不存在"),   // "册条码号 '{0}' 不存在"
                        strItemBarcode);

                    // "册条码号 '" + strItemBarcode + "' 不存在";
                    result.ErrorCode = ErrorCode.ItemBarcodeNotFound;
                    return result;
                }
                if (nRet == -1)
                {
                    // text-level: 内部错误
                    strError = "读入册记录时发生错误: " + strError;
                    goto ERROR1;
                }

            SKIP0:

                if (aPath.Count > 1)
                {
#if NO
                    if (action == "borrow")
                    {
                        if (this.Statis != null)
                            this.Statis.IncreaseEntryValue(
                                strLibraryCode,
                                "出纳",
                                "借书遇册条码号重复次数",
                                1);

                        result.Value = -1;
                        // text-level: 用户提示
                        result.ErrorInfo = string.Format(this.GetString("册条码号为s的册记录有s条，无法进行借阅操作"),  // "册条码号为 '{0}' 的册记录有 "{1}" 条，无法进行借阅操作。请在附加册记录路径后重新提交借阅操作。"
                            strItemBarcode,
                            aPath.Count.ToString());
                        this.WriteErrorLog(result.ErrorInfo);   // 2012/12/30

                        // "册条码号为 '" + strItemBarcode + "' 的册记录有 " + aPath.Count.ToString() + " 条，无法进行借阅操作。请在附加册记录路径后重新提交借阅操作。";
                        result.ErrorCode = ErrorCode.ItemBarcodeDup;

                        aDupPath = aPath.ToArray();
                        //aDupPath = new string[aPath.Count];
                        //aPath.CopyTo(aDupPath);
                        return result;
                    }
                    if (action == "return")
                    {
                        if (this.Statis != null)
                            this.Statis.IncreaseEntryValue(
                            strLibraryCode,
                            "出纳",
                            "还书遇册条码号重复次数",
                            1);

                        bItemBarcodeDup = true; // 此时已经需要设置状态。虽然后面可以进一步识别出真正的册记录

                        strDupBarcodeList = StringUtil.MakePathList(aPath);

                        List<string> aFoundPath = null;
                        List<byte[]> aTimestamp = null;
                        List<string> aItemXml = null;

                        if (String.IsNullOrEmpty(strReaderBarcodeParam) == true)
                        {
                            if (this.Statis != null)
                                this.Statis.IncreaseEntryValue(
                                strLibraryCode,
                                "出纳",
                                "还书遇册条码号重复并无读者证条码号辅助判断次数",
                                1);

                            // 如果没有给出读者证条码号参数
                            result.Value = -1;
                            result.ErrorInfo = "册条码号为 '" + strItemBarcodeParam + "' 册记录有 " + aPath.Count.ToString() + " 条，无法进行还书操作。请在附加册记录路径后重新提交还书操作。";
                            result.ErrorCode = ErrorCode.ItemBarcodeDup;

                            aDupPath = new string[aPath.Count];
                            aPath.CopyTo(aDupPath);
                            return result;
                        }

                        // 从若干重复条码号的册记录中，选出其中符合当前读者证条码号的
                        // return:
                        //      -1  出错
                        //      其他    选出的数量
                        nRet = FindItem(
                            channel,
                            strReaderBarcode,
                            aPath,
                            true,   // 优化
                            out aFoundPath,
                            out aItemXml,
                            out aTimestamp,
                            out strError);
                        if (nRet == -1)
                        {
                            strError = "选择重复条码号的册记录时发生错误: " + strError;
                            goto ERROR1;
                        }

                        if (nRet == 0)
                        {
                            result.Value = -1;
                            result.ErrorInfo = "册条码号 '" + strItemBarcodeParam + "' 检索出的 " + aPath.Count + " 条记录中，没有任何一条其<borrower>元素表明了被读者 '" + strReaderBarcode + "' 借阅。";
                            result.ErrorCode = ErrorCode.ItemBarcodeNotFound;
                            return result;
                        }

                        if (nRet > 1)
                        {
                            if (this.Statis != null)
                                this.Statis.IncreaseEntryValue(
                                strLibraryCode,
                                "出纳",
                                "借书遇册条码号重复并读者证条码号也无法去重次数",  // TODO: 是否要修改为 “还书”?
                                1);

                            result.Value = -1;
                            result.ErrorInfo = "册条码号为 '" + strItemBarcodeParam + "' 并且<borrower>元素表明为读者 '" + strReaderBarcode + "' 借阅的册记录有 " + aFoundPath.Count.ToString() + " 条，无法进行还书操作。请在附加册记录路径后重新提交还书操作。";
                            result.ErrorCode = ErrorCode.ItemBarcodeDup;
                            this.WriteErrorLog(result.ErrorInfo);   // 2012/12/30

                            aDupPath = new string[aFoundPath.Count];
                            aFoundPath.CopyTo(aDupPath);
                            return result;
                        }

                        Debug.Assert(nRet == 1, "");

                        if (this.Statis != null)
                            this.Statis.IncreaseEntryValue(strLibraryCode,
                            "出纳",
                            "借书遇册条码号重复但根据读者证条码号成功去重次数",  // TODO: 是否要修改为 “还书”?
                            1);

                        this.WriteErrorLog("借书遇册条码号 '" + strItemBarcodeParam + "' 重复但根据读者证条码号 '" + strReaderBarcode + "' 成功去重");   // 2012/12/30

                        strOutputItemRecPath = aFoundPath[0];
                        item_timestamp = aTimestamp[0];
                        strItemXml = aItemXml[0];
                    }
#endif
                    // TODO: 建议再用 OI 过滤一下检索到的多条记录，如果只有一条通过过滤，则可以认为就是命中的这一条

                    result.ErrorInfo = "用" + strItemFrom + " '" + strItemBarcode + "' 检索册记录命中 " + nRet.ToString() + " 条";
                    result.ErrorCode = ErrorCode.ItemBarcodeDup;

                    //aDupPath = new string[aPath.Count];
                    //aPath.CopyTo(aDupPath);
                    return result;
                }
                else
                {
                    Debug.Assert(nRet == 1, "");
                    Debug.Assert(aPath.Count == 1, "");

                    if (nRet == 1)
                    {
                        strOutputItemRecPath = aPath[0];
                    }
                }
            }

            // 用 OI 判断这一条册记录是否符合要求
            if (strOwnerInstitution != null
                && string.IsNullOrEmpty(strItemXml) == false)
            {
                // return:
                //      -1  出错
                //      0   没有通过较验
                //      1   通过了较验
                nRet = VerifyItemOI(
    strOutputItemRecPath,
    strItemXml,
    strOwnerInstitution,
    out strError);
                if (nRet == -1)
                    goto ERROR1;
                if (nRet == 0)
                {
                    result.Value = -1;
                    result.ErrorInfo = strError;
                    result.ErrorCode = ErrorCode.ItemBarcodeNotFound;
                    return result;
                }
            }
#if NO
            // 用 OI 判断这一条册记录是否符合要求
            if (strOwnerInstitution != null)
            {
                var rfid = this.LibraryCfgDom.DocumentElement.SelectSingleNode("rfid") as XmlElement;
                if (rfid == null)
                {
                    strError = $"library.xml 中没有配置 rfid 元素，无法针对请求的所属机构代码 '{strOwnerInstitution}' 进行核实";
                    goto ERROR1;
                }

                XmlDocument itemdom = new XmlDocument();
                itemdom.LoadXml(strItemXml);
                string strLocation = DomUtil.GetElementText(itemdom.DocumentElement, "location");
                strLocation = StringUtil.GetPureLocation(strLocation);

                // return:
                //      true    找到。信息在 isil 和 alternative 参数里面返回
                //      false   没有找到
                var ret = GetOwnerInstitution(
                    rfid,
                    strLocation,
                    out string isil,
                    out string alternative);
                int matched = 0;
                if (string.IsNullOrEmpty(isil) == false && strOwnerInstitution == isil)
                    matched++;
                if (string.IsNullOrEmpty(alternative) == false && strOwnerInstitution == alternative)
                    matched++;

                if (matched == 0)
                {
                    strError = $"请求的所属机构 '{strOwnerInstitution}' 和册记录 {strOutputItemRecPath} 的所属机构代码 '{isil}' 和 '{alternative}' 不吻合";
                    goto ERROR1;
                }
            }
#endif
            return result;
        ERROR1:
            result.Value = -1;
            result.ErrorInfo = strError;
            result.ErrorCode = ErrorCode.SystemError;
            return result;
        }
