//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace WebApplication1.localhost {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="gcatSoap", Namespace="http://dp2003.com/dp2libraryws/gcat.asmx")]
    public partial class gcat : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQuestionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AnswerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNumberOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public gcat() {
            this.Url = global::WebApplication1.Properties.Settings.Default.WebApplication1_localhost_gcat;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event ClearCompletedEventHandler ClearCompleted;
        
        /// <remarks/>
        public event GetQuestionCompletedEventHandler GetQuestionCompleted;
        
        /// <remarks/>
        public event AnswerCompletedEventHandler AnswerCompleted;
        
        /// <remarks/>
        public event GetNumberCompletedEventHandler GetNumberCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dp2003.com/dp2libraryws/gcat.asmx/Login", RequestNamespace="http://dp2003.com/dp2libraryws/gcat.asmx", ResponseNamespace="http://dp2003.com/dp2libraryws/gcat.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Login(string strUserName, string strPassword, out string strError) {
            object[] results = this.Invoke("Login", new object[] {
                        strUserName,
                        strPassword});
            strError = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string strUserName, string strPassword) {
            this.LoginAsync(strUserName, strPassword, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string strUserName, string strPassword, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        strUserName,
                        strPassword}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dp2003.com/dp2libraryws/gcat.asmx/Clear", RequestNamespace="http://dp2003.com/dp2libraryws/gcat.asmx", ResponseNamespace="http://dp2003.com/dp2libraryws/gcat.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Clear() {
            this.Invoke("Clear", new object[0]);
        }
        
        /// <remarks/>
        public void ClearAsync() {
            this.ClearAsync(null);
        }
        
        /// <remarks/>
        public void ClearAsync(object userState) {
            if ((this.ClearOperationCompleted == null)) {
                this.ClearOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearOperationCompleted);
            }
            this.InvokeAsync("Clear", new object[0], this.ClearOperationCompleted, userState);
        }
        
        private void OnClearOperationCompleted(object arg) {
            if ((this.ClearCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dp2003.com/dp2libraryws/gcat.asmx/GetQuestion", RequestNamespace="http://dp2003.com/dp2libraryws/gcat.asmx", ResponseNamespace="http://dp2003.com/dp2libraryws/gcat.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetQuestion(out string strQuestion, out string strError) {
            object[] results = this.Invoke("GetQuestion", new object[0]);
            strQuestion = ((string)(results[1]));
            strError = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetQuestionAsync() {
            this.GetQuestionAsync(null);
        }
        
        /// <remarks/>
        public void GetQuestionAsync(object userState) {
            if ((this.GetQuestionOperationCompleted == null)) {
                this.GetQuestionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuestionOperationCompleted);
            }
            this.InvokeAsync("GetQuestion", new object[0], this.GetQuestionOperationCompleted, userState);
        }
        
        private void OnGetQuestionOperationCompleted(object arg) {
            if ((this.GetQuestionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuestionCompleted(this, new GetQuestionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dp2003.com/dp2libraryws/gcat.asmx/Answer", RequestNamespace="http://dp2003.com/dp2libraryws/gcat.asmx", ResponseNamespace="http://dp2003.com/dp2libraryws/gcat.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Answer(string strQuestion, string strAnswer, out string strError) {
            object[] results = this.Invoke("Answer", new object[] {
                        strQuestion,
                        strAnswer});
            strError = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AnswerAsync(string strQuestion, string strAnswer) {
            this.AnswerAsync(strQuestion, strAnswer, null);
        }
        
        /// <remarks/>
        public void AnswerAsync(string strQuestion, string strAnswer, object userState) {
            if ((this.AnswerOperationCompleted == null)) {
                this.AnswerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAnswerOperationCompleted);
            }
            this.InvokeAsync("Answer", new object[] {
                        strQuestion,
                        strAnswer}, this.AnswerOperationCompleted, userState);
        }
        
        private void OnAnswerOperationCompleted(object arg) {
            if ((this.AnswerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AnswerCompleted(this, new AnswerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dp2003.com/dp2libraryws/gcat.asmx/GetNumber", RequestNamespace="http://dp2003.com/dp2libraryws/gcat.asmx", ResponseNamespace="http://dp2003.com/dp2libraryws/gcat.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetNumber(string strAuthor, bool bSelectPinyin, bool bSelectEntry, bool bOutputDebugInfo, out string strNumber, out string strDebugInfo, out string strError) {
            object[] results = this.Invoke("GetNumber", new object[] {
                        strAuthor,
                        bSelectPinyin,
                        bSelectEntry,
                        bOutputDebugInfo});
            strNumber = ((string)(results[1]));
            strDebugInfo = ((string)(results[2]));
            strError = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetNumberAsync(string strAuthor, bool bSelectPinyin, bool bSelectEntry, bool bOutputDebugInfo) {
            this.GetNumberAsync(strAuthor, bSelectPinyin, bSelectEntry, bOutputDebugInfo, null);
        }
        
        /// <remarks/>
        public void GetNumberAsync(string strAuthor, bool bSelectPinyin, bool bSelectEntry, bool bOutputDebugInfo, object userState) {
            if ((this.GetNumberOperationCompleted == null)) {
                this.GetNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNumberOperationCompleted);
            }
            this.InvokeAsync("GetNumber", new object[] {
                        strAuthor,
                        bSelectPinyin,
                        bSelectEntry,
                        bOutputDebugInfo}, this.GetNumberOperationCompleted, userState);
        }
        
        private void OnGetNumberOperationCompleted(object arg) {
            if ((this.GetNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNumberCompleted(this, new GetNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void ClearCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetQuestionCompletedEventHandler(object sender, GetQuestionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuestionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQuestionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strQuestion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void AnswerCompletedEventHandler(object sender, AnswerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AnswerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AnswerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetNumberCompletedEventHandler(object sender, GetNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strDebugInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
}

#pragma warning restore 1591