<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
    <comment>TAB栏标题</comment>
  </data>
  <data name="Email地址" xml:space="preserve">
    <value>Email地址</value>
    <comment>“Email”</comment>
  </data>
  <data name="Email地址不能为空" xml:space="preserve">
    <value>Email地址不能为空</value>
  </data>
  <data name="ID" xml:space="preserve">
    <value>ID</value>
    <comment>TAB栏标题</comment>
  </data>
  <data name="出生日期" xml:space="preserve">
    <value>出生日期</value>
    <comment>“姓名+生日”</comment>
  </data>
  <data name="出生日期应为8位数字以内" xml:space="preserve">
    <value>出生日期应为8位数字以内。例如'19710401'</value>
  </data>
  <data name="姓名" xml:space="preserve">
    <value>姓名</value>
    <comment>“姓名+生日”</comment>
  </data>
  <data name="姓名不能为空" xml:space="preserve">
    <value>姓名不能为空</value>
  </data>
  <data name="姓名加生日" xml:space="preserve">
    <value>姓名</value>
    <comment>TAB栏标题</comment>
  </data>
  <data name="密码" xml:space="preserve">
    <value>密码</value>
  </data>
  <data name="序号" xml:space="preserve">
    <value>序号</value>
    <comment>多行状态时</comment>
  </data>
  <data name="当姓名发生重复时需填此项" xml:space="preserve">
    <value>注: 当姓名发生重复时需填此项。&lt;br/&gt;格式为8位数字(年[4位]月[2位]日[2位])，例: 19710401</value>
    <comment>“姓名+生日”</comment>
  </data>
  <data name="找回密码" xml:space="preserve">
    <value>找回密码</value>
    <comment>面板标题，按钮</comment>
  </data>
  <data name="用户ID" xml:space="preserve">
    <value>用户ID</value>
    <comment>“ID”</comment>
  </data>
  <data name="用户ID不能为空" xml:space="preserve">
    <value>用户ID不能为空</value>
  </data>
  <data name="电话号码" xml:space="preserve">
    <value>电话号码</value>
    <comment>TAB栏标题</comment>
  </data>
  <data name="电话号码不能为空" xml:space="preserve">
    <value>电话号码不能为空</value>
  </data>
  <data name="登录" xml:space="preserve">
    <value>登录</value>
    <comment>面板标题，按钮</comment>
  </data>
  <data name="登录中发现有多个账户符合条件" xml:space="preserve">
    <value>登录中发现有 {0} 个账户符合条件。请在下面输入0-{1}的序号后，重新登录</value>
  </data>
  <data name="登录中发现有多个账户符合条件，请在下面输入出生日期后重新登录" xml:space="preserve">
    <value>登录中发现有 {0} 个账户符合条件。请在下面输入出生日期后，(密码可能需要重新输入，) 重新登录</value>
  </data>
  <data name="访客登录" xml:space="preserve">
    <value>访客登录 »</value>
    <comment>TAB栏标题</comment>
  </data>
  <data name="证号" xml:space="preserve">
    <value>证号</value>
    <comment>TAB栏标题</comment>
  </data>
	<data name="参考ID" xml:space="preserve">
    <value>参考ID</value>
    <comment>TAB栏标题</comment>
  </data>
  <data name="证号不能为空" xml:space="preserve">
    <value>证号不能为空</value>
    <comment>“证号”</comment>
  </data>
  <data name="参考ID不能为空" xml:space="preserve">
    <value>参考ID不能为空</value>
    <comment>“参考ID”</comment>
  </data>
  <data name="证条码号" xml:space="preserve">
    <value>证条码号</value>
    <comment>TAB栏标题</comment>
  </data>
  <data name="读者" xml:space="preserve">
    <value>读者 »</value>
    <comment>TAB栏标题</comment>
  </data>
  <data name="读者证号" xml:space="preserve">
    <value>读者证号</value>
  </data>
  <data name="读者证条码号" xml:space="preserve">
    <value>读者证条码号</value>
    <comment>“证条码号”</comment>
  </data>
  <data name="读者证条码号不能为空" xml:space="preserve">
    <value>读者证条码号不能为空</value>
  </data>
  <data name="身份证号" xml:space="preserve">
    <value>身份证号</value>
    <comment>TAB栏标题</comment>
  </data>
  <data name="身份证号不能为空" xml:space="preserve">
    <value>身份证号不能为空</value>
    <comment>“身份证号”</comment>
  </data>
  <data name="重新登录" xml:space="preserve">
    <value>重新登录</value>
    <comment>按钮</comment>
  </data>
  <data name="馆员" xml:space="preserve">
    <value>馆员 »</value>
    <comment>TAB栏标题</comment>
  </data>
</root>