
        // TODO: 即将废止
        // 同步
        // 注：中途遇到异常(例如 Loader 抛出异常)，可能会丢失 INSERT_BATCH 条以内的日志记录写入 operlog 表
        // parameters:
        //      strLastDate   处理中断或者结束时返回最后处理过的日期
        //      last_index  处理或中断返回时最后处理过的位置。以后继续处理的时候可以从这个偏移开始
        // return:
        //      -1  出错
        //      0   中断
        //      1   完成
        public int DoReplication(
            ref LibraryContext context,
            LibraryChannel channel,
            string strStartDate,
            string strEndDate,
            LogType logType,
            Delegate_showMessage func_showMessage,
            CancellationToken token,
            out string strLastDate,
            out long last_index,
            out string strError)
        {
            strError = "";
            strLastDate = "";
            last_index = -1;    // -1 表示尚未处理

            int nRet = 0;

            // bool bUserChanged = false;

            // strStartDate 里面可能会包含 ":1-100" 这样的附加成分
            StringUtil.ParseTwoPart(strStartDate,
                ":",
                out string strLeft,
                out string strRight);
            strStartDate = strLeft;

            if (string.IsNullOrEmpty(strStartDate) == true)
            {
                strError = "DoReplication() 出错: strStartDate 参数值不应为空";
                return -1;
            }

            // stop.Initial("正在进行同步 ...");

            try
            {
                /*
                List<BiblioDbFromInfo> styles = null;
                // 获得所有分类号检索途径 style
                int nRet = GetClassFromStylesFromFile(out styles,
                    out strError);
                if (nRet == -1)
                    return -1;

                _classFromStyles = styles;

                _updateBiblios.Clear();
                _updateItems.Clear();
                _updateReaders.Clear();
                */

                nRet = OperLogLoader.MakeLogFileNames(strStartDate,
                    strEndDate,
                    true,  // 是否包含扩展名 ".log"
                    out List<string> dates,
                    out string strWarning,
                    out strError);
                if (nRet == -1)
                    return -1;

                if (dates.Count > 0 && string.IsNullOrEmpty(strRight) == false)
                {
                    dates[0] = dates[0] + ":" + strRight;
                }

                // this.Channel.Timeout = new TimeSpan(0, 1, 0);   // 一分钟

                ProgressEstimate estimate = new ProgressEstimate();

                OperLogLoader loader = new OperLogLoader();
                loader.Channel = channel;
                loader.Stop = null;
                loader.Estimate = estimate;
                loader.Dates = dates;
                loader.Level = 2;  // Program.MainForm.OperLogLevel;
                loader.AutoCache = false;
                loader.CacheDir = "";
                loader.LogType = logType;

                //loader.Prompt -= new MessagePromptEventHandler(loader_Prompt);
                //loader.Prompt += new MessagePromptEventHandler(loader_Prompt);

                /*
                // List<OperLogLine> lines = new List<OperLogLine>();
                MultiBuffer buffer = new MultiBuffer();
                buffer.Initial();
                */

                int nProcessCount = 0;
                int nRecCount = 0;

                string prev_date = "";
                string strLastItemDate = "";
                long lLastItemIndex = -1;
                foreach (OperLogItem item in loader)
                {
                    if (token != null && token.IsCancellationRequested)
                    {
                        strError = "用户中断";
                        return 0;
                    }

                    if (prev_date != item.Date)
                    {
                        func_showMessage?.Invoke($"正在处理日志文件 {item.Date}");
                        prev_date = item.Date;
                    }

                    // stop.SetMessage("正在同步 " + item.Date + " " + item.Index.ToString() + " " + estimate.Text + "...");

                    if (string.IsNullOrEmpty(item.Xml) == true)
                        goto CONTINUE;

                    XmlDocument dom = new XmlDocument();
                    try
                    {
                        dom.LoadXml(item.Xml);
                    }
                    catch (Exception ex)
                    {
                        strError = logType.ToString() + "日志记录 " + item.Date + " " + item.Index.ToString() + " XML 装入 DOM 的时候发生错误: " + ex.Message;
                        // TODO: 写入错误日志

                        continue;
                    }

                    string strOperation = DomUtil.GetElementText(dom.DocumentElement, "operation");
                    if (strOperation == "setUser")
                    {
                        // bUserChanged = true;
                        goto CONTINUE;
                    }
                    else
                    {
                        string strAction = DomUtil.GetElementText(dom.DocumentElement, "action");

                        OperLogItem current_item = item;
                        if (StringUtil.CompareVersion(this.ServerVersion, "2.74") < 0
&& strOperation == "amerce" && (strAction == "amerce" || strAction == "modifyprice"))
                        {
                            // 重新获得当前日志记录，用最详细级别
                            OperLogItem new_item = loader.LoadOperLogItem(item, 0);
                            if (new_item == null)
                            {
                                strError = "重新获取 OperLogItem 时出错";
                                return -1;
                            }
                            dom.LoadXml(new_item.Xml);
                            current_item = new_item;
                        }

#if NO
                        // 在内存中增加一行，关于 operlogXXX 表的信息
                        nRet = buffer.AddLine(
    strOperation,
    dom,
    current_item.Date,
    current_item.Index,
    out strError);
                        if (nRet == -1)
                            return -1;
                        bool bForce = false;
                        if (nRecCount >= 4000)
                            bForce = true;
                        nRet = buffer.WriteToDb(connection,
                            true,
                            bForce,
                            out strError);
                        if (bForce == true)
                        {
                            // 记忆
                            strLastDate = item.Date;
                            last_index = item.Index + 1;
                            nRecCount = 0;
                        }
                        // 2016/5/22
                        if (nRet == -1)
                            return -1;
#endif

                        nRecCount++;
                    }

                    // 将一条日志记录中的动作兑现到 item reader biblio class_ 表
                    // return:
                    //      -1  出错
                    //      0   没有必要处理
                    //      1   完成
                    nRet = ProcessLogRecord(
                        context,
                        item,
                        dom,
                        out strError);
                    if (nRet == -1)
                    {
                        strError = "同步 " + item.Date + " " + item.Index.ToString() + " 时出错: " + strError;
                        // TODO: 写入错误日志
#if NO
                        // TODO: 最好有个冻结按钮
                        DialogResult result = System.Windows.Forms.DialogResult.Cancel;
                        string strText = strError;
                        this.Invoke((Action)(() =>
                        {
                            result = AutoCloseMessageBox.Show(this, strText + "\r\n\r\n(点右上角关闭按钮可以中断批处理)", 5000);
                        }));

                        if (result != System.Windows.Forms.DialogResult.OK)
                            return -1;  // TODO: 缓存中没有兑现的怎么办?

                        // 记入日志，继续处理
                        this.GetErrorInfoForm().WriteHtml(strError + "\r\n");
#endif
                    }
                    if (nRet == 1)
                        nProcessCount++;

                    if (nProcessCount >= 1000)
                    {
                        context.SaveChanges();
                        context.Dispose();
                        context = new LibraryContext();
                        nProcessCount = 0;
                    }

                // lProcessCount++;
                CONTINUE:
                    // 便于循环外获得这些值
                    strLastItemDate = item.Date;
                    lLastItemIndex = item.Index + 1;

                    // index = 0;  // 第一个日志文件后面的，都从头开始了
                }

                context.SaveChanges();

#if NO
                // 缓存中尚未最后兑现的部分
                nRet = FlushUpdate(
                    connection,
                    out strError);
                if (nRet == -1)
                    return -1;

                // 最后一批
                nRet = buffer.WriteToDb(connection,
true,
true,   // false,
out strError);
                if (nRet == -1)
                    return -1;

                // 记忆
                strLastDate = strLastItemDate;
                last_index = lLastItemIndex;

                if (bUserChanged == true)
                {
                    nRet = DoCreateUserTable(out strError);
                    if (nRet == -1)
                        return -1;
                }
#endif

                return 1;
            }
            catch (Exception ex)
            {
                strError = "DoReplication() exception: " + ExceptionUtil.GetDebugText(ex);
                return -1;
            }
        }
